!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(w,e){function t(e,t){return t.toUpperCase()}var d=[],h=w.document,c=d.slice,m=d.concat,s=d.push,o=d.indexOf,n={},r=n.toString,g=n.hasOwnProperty,v={},i="1.12.4",T=function(e,t){return new T.fn.init(e,t)},a=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,l=/^-ms-/,u=/-([\da-z])/gi;function f(e){var t=!!e&&"length"in e&&e.length,n=T.type(e);return"function"!==n&&!T.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}T.fn=T.prototype={jquery:i,constructor:T,selector:"",length:0,toArray:function(){return c.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:c.call(this)},pushStack:function(e){e=T.merge(this.constructor(),e);return e.prevObject=this,e.context=this.context,e},each:function(e){return T.each(this,e)},map:function(n){return this.pushStack(T.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(c.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,e=+e+(e<0?t:0);return this.pushStack(0<=e&&e<t?[this[e]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:d.sort,splice:d.splice},T.extend=T.fn.extend=function(){var e,t,n,r,o,i=arguments[0]||{},a=1,s=arguments.length,l=!1;for("boolean"==typeof i&&(l=i,i=arguments[a]||{},a++),"object"==typeof i||T.isFunction(i)||(i={}),a===s&&(i=this,a--);a<s;a++)if(null!=(r=arguments[a]))for(n in r)o=i[n],i!==(t=r[n])&&(l&&t&&(T.isPlainObject(t)||(e=T.isArray(t)))?(o=e?(e=!1,o&&T.isArray(o)?o:[]):o&&T.isPlainObject(o)?o:{},i[n]=T.extend(l,o,t)):void 0!==t&&(i[n]=t));return i},T.extend({expando:"jQuery"+(i+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===T.type(e)},isArray:Array.isArray||function(e){return"array"===T.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){var t=e&&e.toString();return!T.isArray(e)&&0<=t-parseFloat(t)+1},isEmptyObject:function(e){for(var t in e)return!1;return!0},isPlainObject:function(e){if(!e||"object"!==T.type(e)||e.nodeType||T.isWindow(e))return!1;try{if(e.constructor&&!g.call(e,"constructor")&&!g.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}if(!v.ownFirst)for(var t in e)return g.call(e,t);for(t in e);return void 0===t||g.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[r.call(e)]||"object":typeof e},globalEval:function(e){e&&T.trim(e)&&(w.execScript||function(e){w.eval.call(w,e)})(e)},camelCase:function(e){return e.replace(l,"ms-").replace(u,t)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,r=0;if(f(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(a,"")},makeArray:function(e,t){t=t||[];return null!=e&&(f(Object(e))?T.merge(t,"string"==typeof e?[e]:e):s.call(t,e)),t},inArray:function(e,t,n){var r;if(t){if(o)return o.call(t,e,n);for(r=t.length,n=n?n<0?Math.max(0,r+n):n:0;n<r;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;)e[o++]=t[r++];if(n!=n)for(;void 0!==t[r];)e[o++]=t[r++];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!=a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(f(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return m.apply([],a)},guid:1,proxy:function(e,t){var n,r;if("string"==typeof t&&(r=e[t],t=e,e=r),T.isFunction(e))return n=c.call(arguments,2),(r=function(){return e.apply(t||this,n.concat(c.call(arguments)))}).guid=e.guid=e.guid||T.guid++,r},now:function(){return+new Date},support:v}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=d[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var p=function(n){function d(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(65536+r):String.fromCharCode(r>>10|55296,1023&r|56320)}function t(){T()}var e,h,x,i,r,m,f,g,w,l,u,T,j,o,C,v,a,s,y,k="sizzle"+ +new Date,b=n.document,S=0,c=0,p=oe(),E=oe(),N=oe(),D=function(e,t){return e===t&&(u=!0),0},A={}.hasOwnProperty,L=[],H=L.pop,M=L.push,q=L.push,B=L.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},O="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",W="\\["+F+"*("+R+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+F+"*\\]",_=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",z=new RegExp(F+"+","g"),I=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),X=new RegExp("^"+F+"*,"+F+"*"),$=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),Y=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),V=new RegExp(_),U=new RegExp("^"+R+"$"),G={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+_),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+O+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=/'|\\/g,ne=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig");try{q.apply(L=B.call(b.childNodes),b.childNodes),L[b.childNodes.length].nodeType}catch(e){q={apply:L.length?function(e,t){M.apply(e,B.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function re(e,t,n,r){var o,i,a,s,l,u,c,d,f=t&&t.ownerDocument,p=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==p&&9!==p&&11!==p)return n;if(!r&&((t?t.ownerDocument||t:b)!==j&&T(t),t=t||j,C)){if(11!==p&&(u=Z.exec(e)))if(o=u[1]){if(9===p){if(!(a=t.getElementById(o)))return n;if(a.id===o)return n.push(a),n}else if(f&&(a=f.getElementById(o))&&y(t,a)&&a.id===o)return n.push(a),n}else{if(u[2])return q.apply(n,t.getElementsByTagName(e)),n;if((o=u[3])&&h.getElementsByClassName&&t.getElementsByClassName)return q.apply(n,t.getElementsByClassName(o)),n}if(h.qsa&&!N[e+" "]&&(!v||!v.test(e))){if(1!==p)f=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(te,"\\$&"):t.setAttribute("id",s=k),i=(c=m(e)).length,l=U.test(s)?"#"+s:"[id='"+s+"']";i--;)c[i]=l+" "+fe(c[i]);d=c.join(","),f=ee.test(e)&&ce(t.parentNode)||t}if(d)try{return q.apply(n,f.querySelectorAll(d)),n}catch(e){}finally{s===k&&t.removeAttribute("id")}}}return g(e.replace(I,"$1"),t,n,r)}function oe(){var n=[];function r(e,t){return n.push(e+" ")>x.cacheLength&&delete r[n.shift()],r[e+" "]=t}return r}function ie(e){return e[k]=!0,e}function ae(e){var t=j.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function se(e,t){for(var n=e.split("|"),r=n.length;r--;)x.attrHandle[n[r]]=t}function le(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||1<<31)-(~e.sourceIndex||1<<31);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ue(a){return ie(function(i){return i=+i,ie(function(e,t){for(var n,r=a([],e.length,i),o=r.length;o--;)e[n=r[o]]&&(e[n]=!(t[n]=e[n]))})})}function ce(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in h=re.support={},r=re.isXML=function(e){e=e&&(e.ownerDocument||e).documentElement;return!!e&&"HTML"!==e.nodeName},T=re.setDocument=function(e){var e=e?e.ownerDocument||e:b;return e!==j&&9===e.nodeType&&e.documentElement&&(o=(j=e).documentElement,C=!r(j),(e=j.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",t,!1):e.attachEvent&&e.attachEvent("onunload",t)),h.attributes=ae(function(e){return e.className="i",!e.getAttribute("className")}),h.getElementsByTagName=ae(function(e){return e.appendChild(j.createComment("")),!e.getElementsByTagName("*").length}),h.getElementsByClassName=K.test(j.getElementsByClassName),h.getById=ae(function(e){return o.appendChild(e).id=k,!j.getElementsByName||!j.getElementsByName(k).length}),h.getById?(x.find.ID=function(e,t){if(void 0!==t.getElementById&&C){e=t.getElementById(e);return e?[e]:[]}},x.filter.ID=function(e){var t=e.replace(ne,d);return function(e){return e.getAttribute("id")===t}}):(delete x.find.ID,x.filter.ID=function(e){var t=e.replace(ne,d);return function(e){e=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return e&&e.value===t}}),x.find.TAG=h.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):h.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"!==e)return i;for(;n=i[o++];)1===n.nodeType&&r.push(n);return r},x.find.CLASS=h.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&C)return t.getElementsByClassName(e)},a=[],v=[],(h.qsa=K.test(j.querySelectorAll))&&(ae(function(e){o.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+F+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+F+"*(?:value|"+O+")"),e.querySelectorAll("[id~="+k+"-]").length||v.push("~="),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||v.push(".#.+[+~]")}),ae(function(e){var t=j.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+F+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(h.matchesSelector=K.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ae(function(e){h.disconnectedMatch=s.call(e,"div"),s.call(e,"[s!='']:x"),a.push("!=",_)}),v=v.length&&new RegExp(v.join("|")),a=a.length&&new RegExp(a.join("|")),e=K.test(o.compareDocumentPosition),y=e||K.test(o.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,t=t&&t.parentNode;return e===t||!(!t||1!==t.nodeType||!(n.contains?n.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},D=e?function(e,t){if(e===t)return u=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!h.sortDetached&&t.compareDocumentPosition(e)===n?e===j||e.ownerDocument===b&&y(b,e)?-1:t===j||t.ownerDocument===b&&y(b,t)?1:l?P(l,e)-P(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],s=[t];if(!o||!i)return e===j?-1:t===j?1:o?-1:i?1:l?P(l,e)-P(l,t):0;if(o===i)return le(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?le(a[r],s[r]):a[r]===b?-1:s[r]===b?1:0}),j},re.matches=function(e,t){return re(e,null,null,t)},re.matchesSelector=function(e,t){if((e.ownerDocument||e)!==j&&T(e),t=t.replace(Y,"='$1']"),h.matchesSelector&&C&&!N[t+" "]&&(!a||!a.test(t))&&(!v||!v.test(t)))try{var n=s.call(e,t);if(n||h.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return 0<re(t,j,null,[e]).length},re.contains=function(e,t){return(e.ownerDocument||e)!==j&&T(e),y(e,t)},re.attr=function(e,t){(e.ownerDocument||e)!==j&&T(e);var n=x.attrHandle[t.toLowerCase()],n=n&&A.call(x.attrHandle,t.toLowerCase())?n(e,t,!C):void 0;return void 0!==n?n:h.attributes||!C?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},re.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},re.uniqueSort=function(e){var t,n=[],r=0,o=0;if(u=!h.detectDuplicates,l=!h.sortStable&&e.slice(0),e.sort(D),u){for(;t=e[o++];)t===e[o]&&(r=n.push(o));for(;r--;)e.splice(n[r],1)}return l=null,e},i=re.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(x=re.selectors={cacheLength:50,createPseudo:ie,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,d),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||re.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&re.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=m(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ne,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=p[e+" "];return t||(t=new RegExp("(^|"+F+")"+e+"("+F+"|$)"))&&p(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(e){e=re.attr(e,t);return null==e?"!="===n:!n||(e+="","="===n?e===r:"!="===n?e!==r:"^="===n?r&&0===e.indexOf(r):"*="===n?r&&-1<e.indexOf(r):"$="===n?r&&e.slice(-r.length)===r:"~="===n?-1<(" "+e.replace(z," ")+" ").indexOf(r):"|="===n&&(e===r||e.slice(0,r.length+1)===r+"-"))}},CHILD:function(h,e,t,m,g){var v="nth"!==h.slice(0,3),y="last"!==h.slice(-4),b="of-type"===e;return 1===m&&0===g?function(e){return!!e.parentNode}:function(e,t,n){var r,o,i,a,s,l,u=v!=y?"nextSibling":"previousSibling",c=e.parentNode,d=b&&e.nodeName.toLowerCase(),f=!n&&!b,p=!1;if(c){if(v){for(;u;){for(a=e;a=a[u];)if(b?a.nodeName.toLowerCase()===d:1===a.nodeType)return!1;l=u="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&f){for(p=(s=(r=(o=(i=(a=c)[k]||(a[k]={}))[a.uniqueID]||(i[a.uniqueID]={}))[h]||[])[0]===S&&r[1])&&r[2],a=s&&c.childNodes[s];a=++s&&a&&a[u]||(p=s=0)||l.pop();)if(1===a.nodeType&&++p&&a===e){o[h]=[S,s,p];break}}else if(!1===(p=f?s=(r=(o=(i=(a=e)[k]||(a[k]={}))[a.uniqueID]||(i[a.uniqueID]={}))[h]||[])[0]===S&&r[1]:p))for(;(a=++s&&a&&a[u]||(p=s=0)||l.pop())&&((b?a.nodeName.toLowerCase()!==d:1!==a.nodeType)||!++p||(f&&((o=(i=a[k]||(a[k]={}))[a.uniqueID]||(i[a.uniqueID]={}))[h]=[S,p]),a!==e)););return(p-=g)===m||p%m==0&&0<=p/m}}},PSEUDO:function(e,i){var t,a=x.pseudos[e]||x.setFilters[e.toLowerCase()]||re.error("unsupported pseudo: "+e);return a[k]?a(i):1<a.length?(t=[e,e,"",i],x.setFilters.hasOwnProperty(e.toLowerCase())?ie(function(e,t){for(var n,r=a(e,i),o=r.length;o--;)e[n=P(e,r[o])]=!(t[n]=r[o])}):function(e){return a(e,0,t)}):a}},pseudos:{not:ie(function(e){var r=[],o=[],s=f(e.replace(I,"$1"));return s[k]?ie(function(e,t,n,r){for(var o,i=s(e,null,r,[]),a=e.length;a--;)(o=i[a])&&(e[a]=!(t[a]=o))}):function(e,t,n){return r[0]=e,s(r,null,n,o),r[0]=null,!o.pop()}}),has:ie(function(t){return function(e){return 0<re(t,e).length}}),contains:ie(function(t){return t=t.replace(ne,d),function(e){return-1<(e.textContent||e.innerText||i(e)).indexOf(t)}}),lang:ie(function(n){return U.test(n||"")||re.error("unsupported lang: "+n),n=n.replace(ne,d).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===o},focus:function(e){return e===j.activeElement&&(!j.hasFocus||j.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(e=e.getAttribute("type"))||"text"===e.toLowerCase())},first:ue(function(){return[0]}),last:ue(function(e,t){return[t-1]}),eq:ue(function(e,t,n){return[n<0?n+t:n]}),even:ue(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ue(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ue(function(e,t,n){for(var r=n<0?n+t:n;0<=--r;)e.push(r);return e}),gt:ue(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function de(){}function fe(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function pe(a,e,t){var s=e.dir,l=t&&"parentNode"===s,u=c++;return e.first?function(e,t,n){for(;e=e[s];)if(1===e.nodeType||l)return a(e,t,n)}:function(e,t,n){var r,o,i=[S,u];if(n){for(;e=e[s];)if((1===e.nodeType||l)&&a(e,t,n))return!0}else for(;e=e[s];)if(1===e.nodeType||l){if((o=(r=(o=e[k]||(e[k]={}))[e.uniqueID]||(o[e.uniqueID]={}))[s])&&o[0]===S&&o[1]===u)return i[2]=o[2];if((r[s]=i)[2]=a(e,t,n))return!0}}}function he(o){return 1<o.length?function(e,t,n){for(var r=o.length;r--;)if(!o[r](e,t,n))return!1;return!0}:o[0]}function me(e,t,n,r,o){for(var i,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(i=e[s])&&(n&&!n(i,r,o)||(a.push(i),u&&t.push(s)));return a}function ge(p,h,m,g,v,e){return g&&!g[k]&&(g=ge(g)),v&&!v[k]&&(v=ge(v,e)),ie(function(e,t,n,r){var o,i,a,s=[],l=[],u=t.length,c=e||function(e,t,n){for(var r=0,o=t.length;r<o;r++)re(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!p||!e&&h?c:me(c,s,p,n,r),f=m?v||(e?p:u||g)?[]:t:d;if(m&&m(d,f,n,r),g)for(o=me(f,l),g(o,[],n,r),i=o.length;i--;)(a=o[i])&&(f[l[i]]=!(d[l[i]]=a));if(e){if(v||p){if(v){for(o=[],i=f.length;i--;)(a=f[i])&&o.push(d[i]=a);v(null,f=[],o,r)}for(i=f.length;i--;)(a=f[i])&&-1<(o=v?P(e,a):s[i])&&(e[o]=!(t[o]=a))}}else f=me(f===t?f.splice(u,f.length):f),v?v(null,t,f,r):q.apply(t,f)})}function ve(g,v){function e(e,t,n,r,o){var i,a,s,l=0,u="0",c=e&&[],d=[],f=w,p=e||b&&x.find.TAG("*",o),h=S+=null==f?1:Math.random()||.1,m=p.length;for(o&&(w=t===j||t||o);u!==m&&null!=(i=p[u]);u++){if(b&&i){for(a=0,t||i.ownerDocument===j||(T(i),n=!C);s=g[a++];)if(s(i,t||j,n)){r.push(i);break}o&&(S=h)}y&&((i=!s&&i)&&l--,e&&c.push(i))}if(l+=u,y&&u!==l){for(a=0;s=v[a++];)s(c,d,t,n);if(e){if(0<l)for(;u--;)c[u]||d[u]||(d[u]=H.call(r));d=me(d)}q.apply(r,d),o&&!e&&0<d.length&&1<l+v.length&&re.uniqueSort(r)}return o&&(S=h,w=f),c}var y=0<v.length,b=0<g.length;return y?ie(e):e}return de.prototype=x.filters=x.pseudos,x.setFilters=new de,m=re.tokenize=function(e,t){var n,r,o,i,a,s,l,u=E[e+" "];if(u)return t?0:u.slice(0);for(a=e,s=[],l=x.preFilter;a;){for(i in n&&!(r=X.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(o=[])),n=!1,(r=$.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(I," ")}),a=a.slice(n.length)),x.filter)!(r=G[i].exec(a))||l[i]&&!(r=l[i](r))||(n=r.shift(),o.push({value:n,type:i,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?re.error(e):E(e,s).slice(0)},f=re.compile=function(e,t){var n,r=[],o=[],i=N[e+" "];if(!i){for(n=(t=t||m(e)).length;n--;)((i=function e(t){for(var r,n,o,i=t.length,a=x.relative[t[0].type],s=a||x.relative[" "],l=a?1:0,u=pe(function(e){return e===r},s,!0),c=pe(function(e){return-1<P(r,e)},s,!0),d=[function(e,t,n){return n=!a&&(n||t!==w)||((r=t).nodeType?u:c)(e,t,n),r=null,n}];l<i;l++)if(n=x.relative[t[l].type])d=[pe(he(d),n)];else{if((n=x.filter[t[l].type].apply(null,t[l].matches))[k]){for(o=++l;o<i&&!x.relative[t[o].type];o++);return ge(1<l&&he(d),1<l&&fe(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(I,"$1"),n,l<o&&e(t.slice(l,o)),o<i&&e(t=t.slice(o)),o<i&&fe(t))}d.push(n)}return he(d)}(t[n]))[k]?r:o).push(i);(i=N(e,ve(o,r))).selector=e}return i},g=re.select=function(e,t,n,r){var o,i,a,s,l,u="function"==typeof e&&e,c=!r&&m(e=u.selector||e);if(n=n||[],1===c.length){if(2<(i=c[0]=c[0].slice(0)).length&&"ID"===(a=i[0]).type&&h.getById&&9===t.nodeType&&C&&x.relative[i[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(ne,d),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(i.shift().value.length)}for(o=G.needsContext.test(e)?0:i.length;o--&&(a=i[o],!x.relative[s=a.type]);)if((l=x.find[s])&&(r=l(a.matches[0].replace(ne,d),ee.test(i[0].type)&&ce(t.parentNode)||t))){if(i.splice(o,1),!(e=r.length&&fe(i)))return q.apply(n,r),n;break}}return(u||f(e,c))(r,t,!C,n,!t||ee.test(e)&&ce(t.parentNode)||t),n},h.sortStable=k.split("").sort(D).join("")===k,h.detectDuplicates=!!u,T(),h.sortDetached=ae(function(e){return 1&e.compareDocumentPosition(j.createElement("div"))}),ae(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||se("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),h.attributes&&ae(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||se("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ae(function(e){return null==e.getAttribute("disabled")})||se(O,function(e,t,n){if(!n)return!0===e[t]?t.toLowerCase():(t=e.getAttributeNode(t))&&t.specified?t.value:null}),re}(w);T.find=p,T.expr=p.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=p.uniqueSort,T.text=p.getText,T.isXMLDoc=p.isXML,T.contains=p.contains;function y(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&T(e).is(n))break;r.push(e)}return r}function b(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var x=T.expr.match.needsContext,j=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,C=/^.[^:#\[\.,]*$/;function k(e,n,r){if(T.isFunction(n))return T.grep(e,function(e,t){return!!n.call(e,t,e)!==r});if(n.nodeType)return T.grep(e,function(e){return e===n!==r});if("string"==typeof n){if(C.test(n))return T.filter(n,e,r);n=T.filter(n,e)}return T.grep(e,function(e){return-1<T.inArray(e,n)!==r})}T.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?T.find.matchesSelector(r,e)?[r]:[]:T.find.matches(e,T.grep(t,function(e){return 1===e.nodeType}))},T.fn.extend({find:function(e){var t,n=[],r=this,o=r.length;if("string"!=typeof e)return this.pushStack(T(e).filter(function(){for(t=0;t<o;t++)if(T.contains(r[t],this))return!0}));for(t=0;t<o;t++)T.find(e,r[t],n);return(n=this.pushStack(1<o?T.unique(n):n)).selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(k(this,e||[],!1))},not:function(e){return this.pushStack(k(this,e||[],!0))},is:function(e){return!!k(this,"string"==typeof e&&x.test(e)?T(e):e||[],!1).length}});var S=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(T.fn.init=function(e,t,n){if(!e)return this;if(n=n||E,"string"!=typeof e)return e.nodeType?(this.context=this[0]=e,this.length=1,this):T.isFunction(e)?void 0!==n.ready?n.ready(e):e(T):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),T.makeArray(e,this));if(!(r="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&3<=e.length?[null,e,null]:S.exec(e))||!r[1]&&t)return(!t||t.jquery?t||n:this.constructor(t)).find(e);if(r[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:h,!0)),j.test(r[1])&&T.isPlainObject(t))for(var r in t)T.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}if((n=h.getElementById(r[2]))&&n.parentNode){if(n.id!==r[2])return E.find(e);this.length=1,this[0]=n}return this.context=h,this.selector=e,this}).prototype=T.fn;var E=T(h),N=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};function A(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t,n=T(e,this),r=n.length;return this.filter(function(){for(t=0;t<r;t++)if(T.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,r=0,o=this.length,i=[],a=x.test(e)||"string"!=typeof e?T(e,t||this.context):0;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&T.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(1<i.length?T.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?T.inArray(this[0],T(e)):T.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){e=e.parentNode;return e&&11!==e.nodeType?e:null},parents:function(e){return y(e,"parentNode")},parentsUntil:function(e,t,n){return y(e,"parentNode",n)},next:function(e){return A(e,"nextSibling")},prev:function(e){return A(e,"previousSibling")},nextAll:function(e){return y(e,"nextSibling")},prevAll:function(e){return y(e,"previousSibling")},nextUntil:function(e,t,n){return y(e,"nextSibling",n)},prevUntil:function(e,t,n){return y(e,"previousSibling",n)},siblings:function(e){return b((e.parentNode||{}).firstChild,e)},children:function(e){return b(e.firstChild)},contents:function(e){return T.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:T.merge([],e.childNodes)}},function(r,o){T.fn[r]=function(e,t){var n=T.map(this,o,e);return(t="Until"!==r.slice(-5)?e:t)&&"string"==typeof t&&(n=T.filter(t,n)),1<this.length&&(D[r]||(n=T.uniqueSort(n)),N.test(r)&&(n=n.reverse())),this.pushStack(n)}});var L,H,M=/\S+/g;function q(){h.addEventListener?(h.removeEventListener("DOMContentLoaded",B),w.removeEventListener("load",B)):(h.detachEvent("onreadystatechange",B),w.detachEvent("onload",B))}function B(){!h.addEventListener&&"load"!==w.event.type&&"complete"!==h.readyState||(q(),T.ready())}for(H in T.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},T.each(e.match(M)||[],function(e,t){n[t]=!0}),n):T.extend({},r);function o(){for(s=r.once,a=i=!0;u.length;c=-1)for(t=u.shift();++c<l.length;)!1===l[c].apply(t[0],t[1])&&r.stopOnFalse&&(c=l.length,t=!1);r.memory||(t=!1),i=!1,s&&(l=t?[]:"")}var i,t,a,s,l=[],u=[],c=-1,d={add:function(){return l&&(t&&!i&&(c=l.length-1,u.push(t)),function n(e){T.each(e,function(e,t){T.isFunction(t)?r.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==T.type(t)&&n(t)})}(arguments),t&&!i&&o()),this},remove:function(){return T.each(arguments,function(e,t){for(var n;-1<(n=T.inArray(t,l,n));)l.splice(n,1),n<=c&&c--}),this},has:function(e){return e?-1<T.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return s=u=[],l=t="",this},disabled:function(){return!l},lock:function(){return s=!0,t||d.disable(),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||o()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!a}};return d},T.extend({Deferred:function(e){var i=[["resolve","done",T.Callbacks("once memory"),"resolved"],["reject","fail",T.Callbacks("once memory"),"rejected"],["notify","progress",T.Callbacks("memory")]],o="pending",a={state:function(){return o},always:function(){return s.done(arguments).fail(arguments),this},then:function(){var o=arguments;return T.Deferred(function(r){T.each(i,function(e,t){var n=T.isFunction(o[e])&&o[e];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&T.isFunction(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this===a?r.promise():this,n?[e]:arguments)})}),o=null}).promise()},promise:function(e){return null!=e?T.extend(e,a):a}},s={};return a.pipe=a.then,T.each(i,function(e,t){var n=t[2],r=t[3];a[t[1]]=n.add,r&&n.add(function(){o=r},i[1^e][2].disable,i[2][2].lock),s[t[0]]=function(){return s[t[0]+"With"](this===s?a:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){function t(t,n,r){return function(e){n[t]=this,r[t]=1<arguments.length?c.call(arguments):e,r===o?u.notifyWith(n,r):--l||u.resolveWith(n,r)}}var o,n,r,i=0,a=c.call(arguments),s=a.length,l=1!==s||e&&T.isFunction(e.promise)?s:0,u=1===l?e:T.Deferred();if(1<s)for(o=new Array(s),n=new Array(s),r=new Array(s);i<s;i++)a[i]&&T.isFunction(a[i].promise)?a[i].promise().progress(t(i,n,o)).done(t(i,r,a)).fail(u.reject):--l;return l||u.resolveWith(r,a),u.promise()}}),T.fn.ready=function(e){return T.ready.promise().done(e),this},T.extend({isReady:!1,readyWait:1,holdReady:function(e){e?T.readyWait++:T.ready(!0)},ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0)!==e&&0<--T.readyWait||(L.resolveWith(h,[T]),T.fn.triggerHandler&&(T(h).triggerHandler("ready"),T(h).off("ready")))}}),T.ready.promise=function(e){if(!L)if(L=T.Deferred(),"complete"===h.readyState||"loading"!==h.readyState&&!h.documentElement.doScroll)w.setTimeout(T.ready);else if(h.addEventListener)h.addEventListener("DOMContentLoaded",B),w.addEventListener("load",B);else{h.attachEvent("onreadystatechange",B),w.attachEvent("onload",B);var n=!1;try{n=null==w.frameElement&&h.documentElement}catch(e){}n&&n.doScroll&&!function t(){if(!T.isReady){try{n.doScroll("left")}catch(e){return w.setTimeout(t,50)}q(),T.ready()}}()}return L.promise(e)},T.ready.promise(),T(v))break;v.ownFirst="0"===H,v.inlineBlockNeedsLayout=!1,T(function(){var e,t,n=h.getElementsByTagName("body")[0];n&&n.style&&(e=h.createElement("div"),(t=h.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(t).appendChild(e),void 0!==e.style.zoom&&(e.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",v.inlineBlockNeedsLayout=e=3===e.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(t))}),function(){var e=h.createElement("div");v.deleteExpando=!0;try{delete e.test}catch(e){v.deleteExpando=!1}e=null}();function P(e){var t=T.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||!0!==t&&e.getAttribute("classid")===t)}var O,F=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,R=/([A-Z])/g;function W(e,t,n){if(void 0===n&&1===e.nodeType){var r="data-"+t.replace(R,"-$1").toLowerCase();if("string"==typeof(n=e.getAttribute(r))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:F.test(n)?T.parseJSON(n):n)}catch(e){}T.data(e,t,n)}else n=void 0}return n}function _(e){for(var t in e)if(("data"!==t||!T.isEmptyObject(e[t]))&&"toJSON"!==t)return;return 1}function z(e,t,n,r){if(P(e)){var o,i=T.expando,a=e.nodeType,s=a?T.cache:e,l=a?e[i]:e[i]&&i;if(l&&s[l]&&(r||s[l].data)||void 0!==n||"string"!=typeof t)return s[l=l||(a?e[i]=d.pop()||T.guid++:i)]||(s[l]=a?{}:{toJSON:T.noop}),"object"!=typeof t&&"function"!=typeof t||(r?s[l]=T.extend(s[l],t):s[l].data=T.extend(s[l].data,t)),l=s[l],r||(l.data||(l.data={}),l=l.data),void 0!==n&&(l[T.camelCase(t)]=n),"string"==typeof t?null==(o=l[t])&&(o=l[T.camelCase(t)]):o=l,o}}function I(e,t,n){if(P(e)){var r,o,i=e.nodeType,a=i?T.cache:e,s=i?e[T.expando]:T.expando;if(a[s]){if(t&&(r=n?a[s]:a[s].data)){o=(t=T.isArray(t)?t.concat(T.map(t,T.camelCase)):t in r||(t=T.camelCase(t))in r?[t]:t.split(" ")).length;for(;o--;)delete r[t[o]];if(n?!_(r):!T.isEmptyObject(r))return}(n||(delete a[s].data,_(a[s])))&&(i?T.cleanData([e],!0):v.deleteExpando||a!=a.window?delete a[s]:a[s]=void 0)}}}T.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return!!(e=e.nodeType?T.cache[e[T.expando]]:e[T.expando])&&!_(e)},data:function(e,t,n){return z(e,t,n)},removeData:function(e,t){return I(e,t)},_data:function(e,t,n){return z(e,t,n,!0)},_removeData:function(e,t){return I(e,t,!0)}}),T.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0!==e)return"object"==typeof e?this.each(function(){T.data(this,e)}):1<arguments.length?this.each(function(){T.data(this,e,t)}):i?W(i,e,T.data(i,e)):void 0;if(this.length&&(o=T.data(i),1===i.nodeType&&!T._data(i,"parsedAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&W(i,r=T.camelCase(r.slice(5)),o[r]);T._data(i,"parsedAttrs",!0)}return o},removeData:function(e){return this.each(function(){T.removeData(this,e)})}}),T.extend({queue:function(e,t,n){var r;if(e)return r=T._data(e,t=(t||"fx")+"queue"),n&&(!r||T.isArray(n)?r=T._data(e,t,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),r=n.length,o=n.shift(),i=T._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,function(){T.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return T._data(e,n)||T._data(e,n,{empty:T.Callbacks("once memory").add(function(){T._removeData(e,t+"queue"),T._removeData(e,n)})})}}),T.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?T.queue(this[0],t):void 0===n?this:this.each(function(){var e=T.queue(this,t,n);T._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&T.dequeue(this,t)})},dequeue:function(e){return this.each(function(){T.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--o||i.resolveWith(a,[a])}var r,o=1,i=T.Deferred(),a=this,s=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(r=T._data(a[s],e+"queueHooks"))&&r.empty&&(o++,r.empty.add(n));return n(),i.promise(t)}}),v.shrinkWrapBlocks=function(){return null!=O?O:(O=!1,(t=h.getElementsByTagName("body")[0])&&t.style?(e=h.createElement("div"),(n=h.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",t.appendChild(n).appendChild(e),void 0!==e.style.zoom&&(e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",e.appendChild(h.createElement("div")).style.width="5px",O=3!==e.offsetWidth),t.removeChild(n),O):void 0);var e,t,n};function X(e,t){return"none"===T.css(e=t||e,"display")||!T.contains(e.ownerDocument,e)}var $=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Y=new RegExp("^(?:([+-])=|)("+$+")([a-z%]*)$","i"),V=["Top","Right","Bottom","Left"];function U(e,t,n,r){var o,i=1,a=20,s=r?function(){return r.cur()}:function(){return T.css(e,t,"")},l=s(),u=n&&n[3]||(T.cssNumber[t]?"":"px"),c=(T.cssNumber[t]||"px"!==u&&+l)&&Y.exec(T.css(e,t));if(c&&c[3]!==u)for(u=u||c[3],n=n||[],c=+l||1;c/=i=i||".5",T.style(e,t,c+u),i!==(i=s()/l)&&1!==i&&--a;);return n&&(c=+c||+l||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=o)),o}var G=function(e,t,n,r,o,i,a){var s=0,l=e.length,u=null==n;if("object"===T.type(n))for(s in o=!0,n)G(e,t,s,n[s],!0,i,a);else if(void 0!==r&&(o=!0,T.isFunction(r)||(a=!0),t=u?a?(t.call(e,r),null):(u=t,function(e,t,n){return u.call(T(e),n)}):t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return o?e:u?t.call(e):l?t(e[0],n):i},Q=/^(?:checkbox|radio)$/i,J=/<([\w:-]+)/,K=/^$|\/(?:java|ecma)script/i,Z=/^\s+/,ee="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";function te(e){var t=ee.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}gt=h.createElement("div"),mt=h.createDocumentFragment(),i=h.createElement("input"),gt.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",v.leadingWhitespace=3===gt.firstChild.nodeType,v.tbody=!gt.getElementsByTagName("tbody").length,v.htmlSerialize=!!gt.getElementsByTagName("link").length,v.html5Clone="<:nav></:nav>"!==h.createElement("nav").cloneNode(!0).outerHTML,i.type="checkbox",i.checked=!0,mt.appendChild(i),v.appendChecked=i.checked,gt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!gt.cloneNode(!0).lastChild.defaultValue,mt.appendChild(gt),(i=h.createElement("input")).setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),gt.appendChild(i),v.checkClone=gt.cloneNode(!0).cloneNode(!0).lastChild.checked,v.noCloneEvent=!!gt.addEventListener,gt[T.expando]=1,v.attributes=!gt.getAttribute(T.expando);var ne={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:v.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};function re(e,t){var n,r,o=0,i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):void 0;if(!i)for(i=[],n=e.childNodes||e;null!=(r=n[o]);o++)!t||T.nodeName(r,t)?i.push(r):T.merge(i,re(r,t));return void 0===t||t&&T.nodeName(e,t)?T.merge([e],i):i}function oe(e,t){for(var n,r=0;null!=(n=e[r]);r++)T._data(n,"globalEval",!t||T._data(t[r],"globalEval"))}ne.optgroup=ne.option,ne.tbody=ne.tfoot=ne.colgroup=ne.caption=ne.thead,ne.th=ne.td;var ie=/<|&#?\w+;/,ae=/<tbody/i;function se(e){Q.test(e.type)&&(e.defaultChecked=e.checked)}function le(e,t,n,r,o){for(var i,a,s,l,u,c,d,f=e.length,p=te(t),h=[],m=0;m<f;m++)if((a=e[m])||0===a)if("object"===T.type(a))T.merge(h,a.nodeType?[a]:a);else if(ie.test(a)){for(l=l||p.appendChild(t.createElement("div")),u=(J.exec(a)||["",""])[1].toLowerCase(),d=ne[u]||ne._default,l.innerHTML=d[1]+T.htmlPrefilter(a)+d[2],i=d[0];i--;)l=l.lastChild;if(!v.leadingWhitespace&&Z.test(a)&&h.push(t.createTextNode(Z.exec(a)[0])),!v.tbody)for(i=(a="table"!==u||ae.test(a)?"<table>"!==d[1]||ae.test(a)?0:l:l.firstChild)&&a.childNodes.length;i--;)T.nodeName(c=a.childNodes[i],"tbody")&&!c.childNodes.length&&a.removeChild(c);for(T.merge(h,l.childNodes),l.textContent="";l.firstChild;)l.removeChild(l.firstChild);l=p.lastChild}else h.push(t.createTextNode(a));for(l&&p.removeChild(l),v.appendChecked||T.grep(re(h,"input"),se),m=0;a=h[m++];)if(r&&-1<T.inArray(a,r))o&&o.push(a);else if(s=T.contains(a.ownerDocument,a),l=re(p.appendChild(a),"script"),s&&oe(l),n)for(i=0;a=l[i++];)K.test(a.type||"")&&n.push(a);return l=null,p}!function(){var e,t,n=h.createElement("div");for(e in{submit:!0,change:!0,focusin:!0})(v[e]=(t="on"+e)in w)||(n.setAttribute(t,"t"),v[e]=!1===n.attributes[t].expando);n=null}();var ue=/^(?:input|select|textarea)$/i,ce=/^key/,de=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,fe=/^(?:focusinfocus|focusoutblur)$/,pe=/^([^.]*)(?:\.(.+)|)/;function he(){return!0}function me(){return!1}function ge(){try{return h.activeElement}catch(e){}}function ve(e,t,n,r,o,i){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)ve(e,s,n,r,t[s],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=me;else if(!o)return e;return 1===i&&(a=o,(o=function(e){return T().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=T.guid++)),e.each(function(){T.event.add(this,t,o,r,n)})}T.event={global:{},add:function(e,t,n,r,o){var i,a,s,l,u,c,d,f,p,h=T._data(e);if(h){for(n.handler&&(n=(s=n).handler,o=s.selector),n.guid||(n.guid=T.guid++),(i=h.events)||(i=h.events={}),(u=h.handle)||((u=h.handle=function(e){return void 0===T||e&&T.event.triggered===e.type?void 0:T.event.dispatch.apply(u.elem,arguments)}).elem=e),a=(t=(t||"").match(M)||[""]).length;a--;)d=p=(c=pe.exec(t[a])||[])[1],f=(c[2]||"").split(".").sort(),d&&(l=T.event.special[d]||{},d=(o?l.delegateType:l.bindType)||d,l=T.event.special[d]||{},c=T.extend({type:d,origType:p,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&T.expr.match.needsContext.test(o),namespace:f.join(".")},s),(p=i[d])||((p=i[d]=[]).delegateCount=0,l.setup&&!1!==l.setup.call(e,r,f,u)||(e.addEventListener?e.addEventListener(d,u,!1):e.attachEvent&&e.attachEvent("on"+d,u))),l.add&&(l.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,c):p.push(c),T.event.global[d]=!0);e=null}},remove:function(e,t,n,r,o){var i,a,s,l,u,c,d,f,p,h,m,g=T.hasData(e)&&T._data(e);if(g&&(c=g.events)){for(u=(t=(t||"").match(M)||[""]).length;u--;)if(p=m=(s=pe.exec(t[u])||[])[1],h=(s[2]||"").split(".").sort(),p){for(d=T.event.special[p]||{},f=c[p=(r?d.delegateType:d.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=i=f.length;i--;)a=f[i],!o&&m!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&("**"!==r||!a.selector)||(f.splice(i,1),a.selector&&f.delegateCount--,d.remove&&d.remove.call(e,a));l&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,g.handle)||T.removeEvent(e,p,g.handle),delete c[p])}else for(p in c)T.event.remove(e,p+t[u],n,r,!0);T.isEmptyObject(c)&&(delete g.handle,T._removeData(e,"events"))}},trigger:function(e,t,n,r){var o,i,a,s,l,u,c=[n||h],d=g.call(e,"type")?e.type:e,f=g.call(e,"namespace")?e.namespace.split("."):[],p=l=n=n||h;if(3!==n.nodeType&&8!==n.nodeType&&!fe.test(d+T.event.triggered)&&(-1<d.indexOf(".")&&(d=(f=d.split(".")).shift(),f.sort()),i=d.indexOf(":")<0&&"on"+d,(e=e[T.expando]?e:new T.Event(d,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:T.makeArray(t,[e]),s=T.event.special[d]||{},r||!s.trigger||!1!==s.trigger.apply(n,t))){if(!r&&!s.noBubble&&!T.isWindow(n)){for(a=s.delegateType||d,fe.test(a+d)||(p=p.parentNode);p;p=p.parentNode)c.push(p),l=p;l===(n.ownerDocument||h)&&c.push(l.defaultView||l.parentWindow||w)}for(u=0;(p=c[u++])&&!e.isPropagationStopped();)e.type=1<u?a:s.bindType||d,(o=(T._data(p,"events")||{})[e.type]&&T._data(p,"handle"))&&o.apply(p,t),(o=i&&p[i])&&o.apply&&P(p)&&(e.result=o.apply(p,t),!1===e.result&&e.preventDefault());if(e.type=d,!r&&!e.isDefaultPrevented()&&(!s._default||!1===s._default.apply(c.pop(),t))&&P(n)&&i&&n[d]&&!T.isWindow(n)){(l=n[i])&&(n[i]=null),T.event.triggered=d;try{n[d]()}catch(e){}T.event.triggered=void 0,l&&(n[i]=l)}return e.result}},dispatch:function(e){e=T.event.fix(e);var t,n,r,o,i,a=c.call(arguments),s=(T._data(this,"events")||{})[e.type]||[],l=T.event.special[e.type]||{};if((a[0]=e).delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,e)){for(i=T.event.handlers.call(this,e,s),t=0;(r=i[t++])&&!e.isPropagationStopped();)for(e.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(o.namespace)||(e.handleObj=o,e.data=o.data,void 0!==(o=((T.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,a))&&!1===(e.result=o)&&(e.preventDefault(),e.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,o,i,a=[],s=t.delegateCount,l=e.target;if(s&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(r=[],n=0;n<s;n++)void 0===r[o=(i=t[n]).selector+" "]&&(r[o]=i.needsContext?-1<T(o,this).index(l):T.find(o,this,null,[l]).length),r[o]&&r.push(i);r.length&&a.push({elem:l,handlers:r})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},fix:function(e){if(e[T.expando])return e;var t,n,r,o=e.type,i=e,a=this.fixHooks[o];for(a||(this.fixHooks[o]=a=de.test(o)?this.mouseHooks:ce.test(o)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new T.Event(i),t=r.length;t--;)e[n=r[t]]=i[n];return e.target||(e.target=i.srcElement||h),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,a.filter?a.filter(e,i):e},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,o=t.button,i=t.fromElement;return null==e.pageX&&null!=t.clientX&&(r=(n=e.target.ownerDocument||h).documentElement,n=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||n&&n.scrollLeft||0)-(r&&r.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||n&&n.scrollTop||0)-(r&&r.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&i&&(e.relatedTarget=i===e.target?t.toElement:i),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ge()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){if(this===ge()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(T.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(e){return T.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n){e=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(e,null,t),e.isDefaultPrevented()&&n.preventDefault()}},T.removeEvent=h.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)}:function(e,t,n){t="on"+t;e.detachEvent&&(void 0===e[t]&&(e[t]=null),e.detachEvent(t,n))},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?he:me):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||T.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:me,isPropagationStopped:me,isImmediatePropagationStopped:me,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=he,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=he,e&&!this.isSimulated&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=he,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,o){T.event.special[e]={delegateType:o,bindType:o,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||T.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=o),t}}}),v.submit||(T.event.special.submit={setup:function(){if(T.nodeName(this,"form"))return!1;T.event.add(this,"click._submit keypress._submit",function(e){e=e.target,e=T.nodeName(e,"input")||T.nodeName(e,"button")?T.prop(e,"form"):void 0;e&&!T._data(e,"submit")&&(T.event.add(e,"submit._submit",function(e){e._submitBubble=!0}),T._data(e,"submit",!0))})},postDispatch:function(e){e._submitBubble&&(delete e._submitBubble,this.parentNode&&!e.isTrigger&&T.event.simulate("submit",this.parentNode,e))},teardown:function(){if(T.nodeName(this,"form"))return!1;T.event.remove(this,"._submit")}}),v.change||(T.event.special.change={setup:function(){if(ue.test(this.nodeName))return"checkbox"!==this.type&&"radio"!==this.type||(T.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._justChanged=!0)}),T.event.add(this,"click._change",function(e){this._justChanged&&!e.isTrigger&&(this._justChanged=!1),T.event.simulate("change",this,e)})),!1;T.event.add(this,"beforeactivate._change",function(e){e=e.target;ue.test(e.nodeName)&&!T._data(e,"change")&&(T.event.add(e,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||T.event.simulate("change",this.parentNode,e)}),T._data(e,"change",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type)return e.handleObj.handler.apply(this,arguments)},teardown:function(){return T.event.remove(this,"._change"),!ue.test(this.nodeName)}}),v.focusin||T.each({focus:"focusin",blur:"focusout"},function(n,r){function o(e){T.event.simulate(r,e.target,T.event.fix(e))}T.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=T._data(e,r);t||e.addEventListener(n,o,!0),T._data(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=T._data(e,r)-1;t?T._data(e,r,t):(e.removeEventListener(n,o,!0),T._removeData(e,r))}}}),T.fn.extend({on:function(e,t,n,r){return ve(this,e,t,n,r)},one:function(e,t,n,r){return ve(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,T(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=me),this.each(function(){T.event.remove(this,e,n,t)});for(o in e)this.off(o,t,e[o]);return this},trigger:function(e,t){return this.each(function(){T.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}});var ye=/ jQuery\d+="(?:null|\d+)"/g,be=new RegExp("<(?:"+ee+")[\\s/>]","i"),xe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,we=/<script|<style|<link/i,Te=/checked\s*(?:[^=]|=\s*.checked.)/i,je=/^true\/(.*)/,Ce=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ke=te(h).appendChild(h.createElement("div"));function Se(e,t){return T.nodeName(e,"table")&&T.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function Ee(e){return e.type=(null!==T.find.attr(e,"type"))+"/"+e.type,e}function Ne(e){var t=je.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function De(e,t){if(1===t.nodeType&&T.hasData(e)){var n,r,o,i=T._data(e),e=T._data(t,i),a=i.events;if(a)for(n in delete e.handle,e.events={},a)for(r=0,o=a[n].length;r<o;r++)T.event.add(t,n,a[n][r]);e.data&&(e.data=T.extend({},e.data))}}function Ae(n,r,o,i){r=m.apply([],r);var e,t,a,s,l,u,c=0,d=n.length,f=d-1,p=r[0],h=T.isFunction(p);if(h||1<d&&"string"==typeof p&&!v.checkClone&&Te.test(p))return n.each(function(e){var t=n.eq(e);h&&(r[0]=p.call(this,e,t.html())),Ae(t,r,o,i)});if(d&&(e=(u=le(r,n[0].ownerDocument,!1,n,i)).firstChild,1===u.childNodes.length&&(u=e),e||i)){for(a=(s=T.map(re(u,"script"),Ee)).length;c<d;c++)t=u,c!==f&&(t=T.clone(t,!0,!0),a&&T.merge(s,re(t,"script"))),o.call(n[c],t,c);if(a)for(l=s[s.length-1].ownerDocument,T.map(s,Ne),c=0;c<a;c++)t=s[c],K.test(t.type||"")&&!T._data(t,"globalEval")&&T.contains(l,t)&&(t.src?T._evalUrl&&T._evalUrl(t.src):T.globalEval((t.text||t.textContent||t.innerHTML||"").replace(Ce,"")));u=e=null}return n}function Le(e,t,n){for(var r,o=t?T.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||T.cleanData(re(r)),r.parentNode&&(n&&T.contains(r.ownerDocument,r)&&oe(re(r,"script")),r.parentNode.removeChild(r));return e}T.extend({htmlPrefilter:function(e){return e.replace(xe,"<$1></$2>")},clone:function(e,t,n){var r,o,i,a,s,l=T.contains(e.ownerDocument,e);if(v.html5Clone||T.isXMLDoc(e)||!be.test("<"+e.nodeName+">")?i=e.cloneNode(!0):(ke.innerHTML=e.outerHTML,ke.removeChild(i=ke.firstChild)),!(v.noCloneEvent&&v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(r=re(i),s=re(e),a=0;null!=(o=s[a]);++a)r[a]&&function(e,t){var n,r,o;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!v.noCloneEvent&&t[T.expando]){for(r in(o=T._data(t)).events)T.removeEvent(t,r,o.handle);t.removeAttribute(T.expando)}"script"===n&&t.text!==e.text?(Ee(t).text=e.text,Ne(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),v.html5Clone&&e.innerHTML&&!T.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Q.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}}(o,r[a]);if(t)if(n)for(s=s||re(e),r=r||re(i),a=0;null!=(o=s[a]);a++)De(o,r[a]);else De(e,i);return 0<(r=re(i,"script")).length&&oe(r,!l&&re(e,"script")),r=s=o=null,i},cleanData:function(e,t){for(var n,r,o,i,a=0,s=T.expando,l=T.cache,u=v.attributes,c=T.event.special;null!=(n=e[a]);a++)if((t||P(n))&&(i=(o=n[s])&&l[o])){if(i.events)for(r in i.events)c[r]?T.event.remove(n,r):T.removeEvent(n,r,i.handle);l[o]&&(delete l[o],u||void 0===n.removeAttribute?n[s]=void 0:n.removeAttribute(s),d.push(o))}}}),T.fn.extend({domManip:Ae,detach:function(e){return Le(this,e,!0)},remove:function(e){return Le(this,e)},text:function(e){return G(this,function(e){return void 0===e?T.text(this):this.empty().append((this[0]&&this[0].ownerDocument||h).createTextNode(e))},null,e,arguments.length)},append:function(){return Ae(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Se(this,e).appendChild(e)})},prepend:function(){return Ae(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=Se(this,e)).insertBefore(e,t.firstChild)})},before:function(){return Ae(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ae(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&T.cleanData(re(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&T.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return T.clone(this,e,t)})},html:function(e){return G(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(ye,""):void 0;if("string"==typeof e&&!we.test(e)&&(v.htmlSerialize||!be.test(e))&&(v.leadingWhitespace||!Z.test(e))&&!ne[(J.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(re(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Ae(this,arguments,function(e){var t=this.parentNode;T.inArray(this,n)<0&&(T.cleanData(re(this)),t&&t.replaceChild(e,this))},n)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){T.fn[e]=function(e){for(var t,n=0,r=[],o=T(e),i=o.length-1;n<=i;n++)t=n===i?this:this.clone(!0),T(o[n])[a](t),s.apply(r,t.get());return this.pushStack(r)}});var He,Me={HTML:"block",BODY:"block"};function qe(e,t){e=T(t.createElement(e)).appendTo(t.body),t=T.css(e[0],"display");return e.detach(),t}function Be(e){var t=h,n=Me[e];return n||("none"!==(n=qe(e,t))&&n||((t=((He=(He||T("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentWindow||He[0].contentDocument).document).write(),t.close(),n=qe(e,t),He.detach()),Me[e]=n),n}function Pe(e,t,n,r){var o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in r=n.apply(e,r||[]),t)e.style[o]=i[o];return r}var Oe,Fe,Re,We,_e,ze,Ie,Xe,$e=/^margin/,Ye=new RegExp("^("+$+")(?!px)[a-z%]+$","i"),Ve=h.documentElement;function Ue(){var e,t=h.documentElement;t.appendChild(Ie),Xe.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",Oe=Re=ze=!1,Fe=_e=!0,w.getComputedStyle&&(e=w.getComputedStyle(Xe),Oe="1%"!==(e||{}).top,ze="2px"===(e||{}).marginLeft,Re="4px"===(e||{width:"4px"}).width,Xe.style.marginRight="50%",Fe="4px"===(e||{marginRight:"4px"}).marginRight,(e=Xe.appendChild(h.createElement("div"))).style.cssText=Xe.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",e.style.marginRight=e.style.width="0",Xe.style.width="1px",_e=!parseFloat((w.getComputedStyle(e)||{}).marginRight),Xe.removeChild(e)),Xe.style.display="none",(We=0===Xe.getClientRects().length)&&(Xe.style.display="",Xe.innerHTML="<table><tr><td></td><td>t</td></tr></table>",Xe.childNodes[0].style.borderCollapse="separate",(e=Xe.getElementsByTagName("td"))[0].style.cssText="margin:0;border:0;padding:0;display:none",(We=0===e[0].offsetHeight)&&(e[0].style.display="",e[1].style.display="none",We=0===e[0].offsetHeight)),t.removeChild(Ie)}Ie=h.createElement("div"),(Xe=h.createElement("div")).style&&(Xe.style.cssText="float:left;opacity:.5",v.opacity="0.5"===Xe.style.opacity,v.cssFloat=!!Xe.style.cssFloat,Xe.style.backgroundClip="content-box",Xe.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===Xe.style.backgroundClip,(Ie=h.createElement("div")).style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",Xe.innerHTML="",Ie.appendChild(Xe),v.boxSizing=""===Xe.style.boxSizing||""===Xe.style.MozBoxSizing||""===Xe.style.WebkitBoxSizing,T.extend(v,{reliableHiddenOffsets:function(){return null==Oe&&Ue(),We},boxSizingReliable:function(){return null==Oe&&Ue(),Re},pixelMarginRight:function(){return null==Oe&&Ue(),Fe},pixelPosition:function(){return null==Oe&&Ue(),Oe},reliableMarginRight:function(){return null==Oe&&Ue(),_e},reliableMarginLeft:function(){return null==Oe&&Ue(),ze}}));var Ge,Qe,Je=/^(top|right|bottom|left)$/;function Ke(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}w.getComputedStyle?(Ge=function(e){var t=e.ownerDocument.defaultView;return(t=!t||!t.opener?w:t).getComputedStyle(e)},Qe=function(e,t,n){var r,o,i=e.style;return""!==(o=(n=n||Ge(e))?n.getPropertyValue(t)||n[t]:void 0)&&void 0!==o||T.contains(e.ownerDocument,e)||(o=T.style(e,t)),n&&!v.pixelMarginRight()&&Ye.test(o)&&$e.test(t)&&(r=i.width,e=i.minWidth,t=i.maxWidth,i.minWidth=i.maxWidth=i.width=o,o=n.width,i.width=r,i.minWidth=e,i.maxWidth=t),void 0===o?o:o+""}):Ve.currentStyle&&(Ge=function(e){return e.currentStyle},Qe=function(e,t,n){var r,o,i,a=e.style;return null==(i=(n=n||Ge(e))?n[t]:void 0)&&a&&a[t]&&(i=a[t]),Ye.test(i)&&!Je.test(t)&&(r=a.left,(n=(o=e.runtimeStyle)&&o.left)&&(o.left=e.currentStyle.left),a.left="fontSize"===t?"1em":i,i=a.pixelLeft+"px",a.left=r,n&&(o.left=n)),void 0===i?i:i+""||"auto"});var Ze=/alpha\([^)]*\)/i,et=/opacity\s*=\s*([^)]*)/i,tt=/^(none|table(?!-c[ea]).+)/,nt=new RegExp("^("+$+")(.*)$","i"),rt={position:"absolute",visibility:"hidden",display:"block"},ot={letterSpacing:"0",fontWeight:"400"},it=["Webkit","O","Moz","ms"],at=h.createElement("div").style;function st(e){if(e in at)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=it.length;n--;)if((e=it[n]+t)in at)return e}function lt(e,t){for(var n,r,o,i=[],a=0,s=e.length;a<s;a++)(r=e[a]).style&&(i[a]=T._data(r,"olddisplay"),n=r.style.display,t?(i[a]||"none"!==n||(r.style.display=""),""===r.style.display&&X(r)&&(i[a]=T._data(r,"olddisplay",Be(r.nodeName)))):(o=X(r),(n&&"none"!==n||!o)&&T._data(r,"olddisplay",o?n:T.css(r,"display"))));for(a=0;a<s;a++)(r=e[a]).style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?i[a]||"":"none"));return e}function ut(e,t,n){var r=nt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function ct(e,t,n,r,o){for(var i=n===(r?"border":"content")?4:"width"===t?1:0,a=0;i<4;i+=2)"margin"===n&&(a+=T.css(e,n+V[i],!0,o)),r?("content"===n&&(a-=T.css(e,"padding"+V[i],!0,o)),"margin"!==n&&(a-=T.css(e,"border"+V[i]+"Width",!0,o))):(a+=T.css(e,"padding"+V[i],!0,o),"padding"!==n&&(a+=T.css(e,"border"+V[i]+"Width",!0,o)));return a}function dt(e,t,n){var r=!0,o="width"===t?e.offsetWidth:e.offsetHeight,i=Ge(e),a=v.boxSizing&&"border-box"===T.css(e,"boxSizing",!1,i);if(o<=0||null==o){if(((o=Qe(e,t,i))<0||null==o)&&(o=e.style[t]),Ye.test(o))return o;r=a&&(v.boxSizingReliable()||o===e.style[t]),o=parseFloat(o)||0}return o+ct(e,t,n||(a?"border":"content"),r,i)+"px"}function ft(e,t,n,r,o){return new ft.prototype.init(e,t,n,r,o)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){e=Qe(e,"opacity");return""===e?"1":e}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:v.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,s=T.camelCase(t),l=e.style;if(t=T.cssProps[s]||(T.cssProps[s]=st(s)||s),a=T.cssHooks[t]||T.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:l[t];if("string"===(i=typeof n)&&(o=Y.exec(n))&&o[1]&&(n=U(e,t,o),i="number"),null!=n&&n==n&&("number"===i&&(n+=o&&o[3]||(T.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),!(a&&"set"in a&&void 0===(n=a.set(e,n,r)))))try{l[t]=n}catch(e){}}},css:function(e,t,n,r){var o,i=T.camelCase(t);return t=T.cssProps[i]||(T.cssProps[i]=st(i)||i),"normal"===(o=void 0===(o=(i=T.cssHooks[t]||T.cssHooks[i])&&"get"in i?i.get(e,!0,n):o)?Qe(e,t,r):o)&&t in ot&&(o=ot[t]),""===n||n?(t=parseFloat(o),!0===n||isFinite(t)?t||0:o):o}}),T.each(["height","width"],function(e,o){T.cssHooks[o]={get:function(e,t,n){if(t)return tt.test(T.css(e,"display"))&&0===e.offsetWidth?Pe(e,rt,function(){return dt(e,o,n)}):dt(e,o,n)},set:function(e,t,n){var r=n&&Ge(e);return ut(0,t,n?ct(e,o,n,v.boxSizing&&"border-box"===T.css(e,"boxSizing",!1,r),r):0)}}}),v.opacity||(T.cssHooks.opacity={get:function(e,t){return et.test((t&&e.currentStyle?e.currentStyle:e.style).filter||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,o=T.isNumeric(t)?"alpha(opacity="+100*t+")":"",e=r&&r.filter||n.filter||"";((n.zoom=1)<=t||""===t)&&""===T.trim(e.replace(Ze,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=Ze.test(e)?e.replace(Ze,o):e+" "+o)}}),T.cssHooks.marginRight=Ke(v.reliableMarginRight,function(e,t){if(t)return Pe(e,{display:"inline-block"},Qe,[e,"marginRight"])}),T.cssHooks.marginLeft=Ke(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Qe(e,"marginLeft"))||(T.contains(e.ownerDocument,e)?e.getBoundingClientRect().left-Pe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}):0))+"px"}),T.each({margin:"",padding:"",border:"Width"},function(o,i){T.cssHooks[o+i]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[o+V[t]+i]=r[t]||r[t-2]||r[0];return n}},$e.test(o)||(T.cssHooks[o+i].set=ut)}),T.fn.extend({css:function(e,t){return G(this,function(e,t,n){var r,o,i={},a=0;if(T.isArray(t)){for(r=Ge(e),o=t.length;a<o;a++)i[t[a]]=T.css(e,t[a],!1,r);return i}return void 0!==n?T.style(e,t,n):T.css(e,t)},e,t,1<arguments.length)},show:function(){return lt(this,!0)},hide:function(){return lt(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){X(this)?T(this).show():T(this).hide()})}}),(T.Tween=ft).prototype={constructor:ft,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(T.cssNumber[n]?"":"px")},cur:function(){var e=ft.propHooks[this.prop];return(e&&e.get?e:ft.propHooks._default).get(this)},run:function(e){var t,n=ft.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),(n&&n.set?n:ft.propHooks._default).set(this),this}},ft.prototype.init.prototype=ft.prototype,ft.propHooks={_default:{get:function(e){return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(e=T.css(e.elem,e.prop,""))&&"auto"!==e?e:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[T.cssProps[e.prop]]&&!T.cssHooks[e.prop]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},ft.propHooks.scrollTop=ft.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=ft.prototype.init,T.fx.step={};var pt,ht,mt,gt,vt=/^(?:toggle|show|hide)$/,yt=/queueHooks$/;function bt(){return w.setTimeout(function(){pt=void 0}),pt=T.now()}function xt(e,t){var n,r={height:e},o=0;for(t=t?1:0;o<4;o+=2-t)r["margin"+(n=V[o])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function wt(e,t,n){for(var r,o=(Tt.tweeners[t]||[]).concat(Tt.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function Tt(o,e,t){var n,i,r=0,a=Tt.prefilters.length,s=T.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var e=pt||bt(),e=Math.max(0,u.startTime+u.duration-e),t=1-(e/u.duration||0),n=0,r=u.tweens.length;n<r;n++)u.tweens[n].run(t);return s.notifyWith(o,[u,t,e]),t<1&&r?e:(s.resolveWith(o,[u]),!1)},u=s.promise({elem:o,props:T.extend({},e),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},t),originalProperties:e,originalOptions:t,startTime:pt||bt(),duration:t.duration,tweens:[],createTween:function(e,t){e=T.Tween(o,u.opts,e,t,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(e),e},stop:function(e){var t=0,n=e?u.tweens.length:0;if(i)return this;for(i=!0;t<n;t++)u.tweens[t].run(1);return e?(s.notifyWith(o,[u,1,0]),s.resolveWith(o,[u,e])):s.rejectWith(o,[u,e]),this}}),c=u.props;for(!function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=T.camelCase(n)],i=e[n],T.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=T.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(c,u.opts.specialEasing);r<a;r++)if(n=Tt.prefilters[r].call(u,o,c,u.opts))return T.isFunction(n.stop)&&(T._queueHooks(u.elem,u.opts.queue).stop=T.proxy(n.stop,n)),n;return T.map(c,wt,u),T.isFunction(u.opts.start)&&u.opts.start.call(o,u),T.fx.timer(T.extend(l,{elem:o,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}T.Animation=T.extend(Tt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return U(n.elem,e,Y.exec(t),n),n}]},tweener:function(e,t){for(var n,r=0,o=(e=T.isFunction(e)?(t=e,["*"]):e.match(M)).length;r<o;r++)n=e[r],Tt.tweeners[n]=Tt.tweeners[n]||[],Tt.tweeners[n].unshift(t)},prefilters:[function(t,e,n){var r,o,i,a,s,l,u,c=this,d={},f=t.style,p=t.nodeType&&X(t),h=T._data(t,"fxshow");for(r in n.queue||(null==(s=T._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,c.always(function(){c.always(function(){s.unqueued--,T.queue(t,"fx").length||s.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],"inline"===("none"===(u=T.css(t,"display"))?T._data(t,"olddisplay")||Be(t.nodeName):u)&&"none"===T.css(t,"float")&&(v.inlineBlockNeedsLayout&&"inline"!==Be(t.nodeName)?f.zoom=1:f.display="inline-block")),n.overflow&&(f.overflow="hidden",v.shrinkWrapBlocks()||c.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),e)if(o=e[r],vt.exec(o)){if(delete e[r],i=i||"toggle"===o,o===(p?"hide":"show")){if("show"!==o||!h||void 0===h[r])continue;p=!0}d[r]=h&&h[r]||T.style(t,r)}else u=void 0;if(T.isEmptyObject(d))"inline"===("none"===u?Be(t.nodeName):u)&&(f.display=u);else for(r in h?"hidden"in h&&(p=h.hidden):h=T._data(t,"fxshow",{}),i&&(h.hidden=!p),p?T(t).show():c.done(function(){T(t).hide()}),c.done(function(){for(var e in T._removeData(t,"fxshow"),d)T.style(t,e,d[e])}),d)a=wt(p?h[r]:0,r,c),r in h||(h[r]=a.start,p&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}],prefilter:function(e,t){t?Tt.prefilters.unshift(e):Tt.prefilters.push(e)}}),T.speed=function(e,t,n){var r=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||T.isFunction(e)&&e,duration:e,easing:n&&t||t&&!T.isFunction(t)&&t};return r.duration=T.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in T.fx.speeds?T.fx.speeds[r.duration]:T.fx.speeds._default,null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){T.isFunction(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(e,t,n,r){return this.filter(X).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var o=T.isEmptyObject(t),i=T.speed(e,n,r),r=function(){var e=Tt(this,T.extend({},t),i);(o||T._data(this,"finish"))&&e.stop(!0)};return r.finish=r,o||!1===i.queue?this.each(r):this.queue(i.queue,r)},stop:function(o,e,i){function a(e){var t=e.stop;delete e.stop,t(i)}return"string"!=typeof o&&(i=e,e=o,o=void 0),e&&!1!==o&&this.queue(o||"fx",[]),this.each(function(){var e=!0,t=null!=o&&o+"queueHooks",n=T.timers,r=T._data(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&yt.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=o&&n[t].queue!==o||(n[t].anim.stop(i),e=!1,n.splice(t,1));!e&&i||T.dequeue(this,o)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=T._data(this),n=t[a+"queue"],r=t[a+"queueHooks"],o=T.timers,i=n?n.length:0;for(t.finish=!0,T.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===a&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<i;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),T.each(["toggle","show","hide"],function(e,r){var o=T.fn[r];T.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?o.apply(this,arguments):this.animate(xt(r,!0),e,t,n)}}),T.each({slideDown:xt("show"),slideUp:xt("hide"),slideToggle:xt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){T.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),T.timers=[],T.fx.tick=function(){var e,t=T.timers,n=0;for(pt=T.now();n<t.length;n++)(e=t[n])()||t[n]!==e||t.splice(n--,1);t.length||T.fx.stop(),pt=void 0},T.fx.timer=function(e){T.timers.push(e),e()?T.fx.start():T.timers.pop()},T.fx.interval=13,T.fx.start=function(){ht=ht||w.setInterval(T.fx.tick,T.fx.interval)},T.fx.stop=function(){w.clearInterval(ht),ht=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(r,e){return r=T.fx&&T.fx.speeds[r]||r,this.queue(e=e||"fx",function(e,t){var n=w.setTimeout(e,r);t.stop=function(){w.clearTimeout(n)}})},p=h.createElement("input"),mt=h.createElement("div"),i=h.createElement("select"),gt=i.appendChild(h.createElement("option")),(mt=h.createElement("div")).setAttribute("className","t"),mt.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",$=mt.getElementsByTagName("a")[0],p.setAttribute("type","checkbox"),mt.appendChild(p),($=mt.getElementsByTagName("a")[0]).style.cssText="top:1px",v.getSetAttribute="t"!==mt.className,v.style=/top/.test($.getAttribute("style")),v.hrefNormalized="/a"===$.getAttribute("href"),v.checkOn=!!p.value,v.optSelected=gt.selected,v.enctype=!!h.createElement("form").enctype,i.disabled=!0,v.optDisabled=!gt.disabled,(p=h.createElement("input")).setAttribute("value",""),v.input=""===p.getAttribute("value"),p.value="t",p.setAttribute("type","radio"),v.radioValue="t"===p.value;var jt=/\r/g,Ct=/[\x20\t\r\n\f]+/g;T.fn.extend({val:function(t){var n,e,r,o=this[0];return arguments.length?(r=T.isFunction(t),this.each(function(e){1===this.nodeType&&(null==(e=r?t.call(this,e,T(this).val()):t)?e="":"number"==typeof e?e+="":T.isArray(e)&&(e=T.map(e,function(e){return null==e?"":e+""})),(n=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,e,"value")||(this.value=e))})):o?(n=T.valHooks[o.type]||T.valHooks[o.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(o,"value"))?e:"string"==typeof(e=o.value)?e.replace(jt,""):null==e?"":e:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:T.trim(T.text(e)).replace(Ct," ")}},select:{get:function(e){for(var t,n=e.options,r=e.selectedIndex,o="select-one"===e.type||r<0,i=o?null:[],a=o?r+1:n.length,s=r<0?a:o?r:0;s<a;s++)if(((t=n[s]).selected||s===r)&&(v.optDisabled?!t.disabled:null===t.getAttribute("disabled"))&&(!t.parentNode.disabled||!T.nodeName(t.parentNode,"optgroup"))){if(t=T(t).val(),o)return t;i.push(t)}return i},set:function(e,t){for(var n,r,o=e.options,i=T.makeArray(t),a=o.length;a--;)if(r=o[a],-1<T.inArray(T.valHooks.option.get(r),i))try{r.selected=n=!0}catch(e){r.scrollHeight}else r.selected=!1;return n||(e.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],function(){T.valHooks[this]={set:function(e,t){if(T.isArray(t))return e.checked=-1<T.inArray(T(e).val(),t)}},v.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var kt,St,Et=T.expr.attrHandle,Nt=/^(?:checked|selected)$/i,Dt=v.getSetAttribute,At=v.input;T.fn.extend({attr:function(e,t){return G(this,T.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){T.removeAttr(this,e)})}}),T.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?T.prop(e,t,n):(1===i&&T.isXMLDoc(e)||(t=t.toLowerCase(),o=T.attrHooks[t]||(T.expr.match.bool.test(t)?St:kt)),void 0!==n?null===n?void T.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):!(o&&"get"in o&&null!==(r=o.get(e,t)))&&null==(r=T.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&T.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,o=0,i=t&&t.match(M);if(i&&1===e.nodeType)for(;n=i[o++];)r=T.propFix[n]||n,T.expr.match.bool.test(n)?At&&Dt||!Nt.test(n)?e[r]=!1:e[T.camelCase("default-"+n)]=e[r]=!1:T.attr(e,n,""),e.removeAttribute(Dt?n:r)}}),St={set:function(e,t,n){return!1===t?T.removeAttr(e,n):At&&Dt||!Nt.test(n)?e.setAttribute(!Dt&&T.propFix[n]||n,n):e[T.camelCase("default-"+n)]=e[n]=!0,n}},T.each(T.expr.match.bool.source.match(/\w+/g),function(e,t){var i=Et[t]||T.find.attr;At&&Dt||!Nt.test(t)?Et[t]=function(e,t,n){var r,o;return n||(o=Et[t],Et[t]=r,r=null!=i(e,t,n)?t.toLowerCase():null,Et[t]=o),r}:Et[t]=function(e,t,n){if(!n)return e[T.camelCase("default-"+t)]?t.toLowerCase():null}}),At&&Dt||(T.attrHooks.value={set:function(e,t,n){if(!T.nodeName(e,"input"))return kt&&kt.set(e,t,n);e.defaultValue=t}}),Dt||(kt={set:function(e,t,n){var r=e.getAttributeNode(n);if(r||e.setAttributeNode(r=e.ownerDocument.createAttribute(n)),r.value=t+="","value"===n||t===e.getAttribute(n))return t}},Et.id=Et.name=Et.coords=function(e,t,n){if(!n)return(t=e.getAttributeNode(t))&&""!==t.value?t.value:null},T.valHooks.button={get:function(e,t){t=e.getAttributeNode(t);if(t&&t.specified)return t.value},set:kt.set},T.attrHooks.contenteditable={set:function(e,t,n){kt.set(e,""!==t&&t,n)}},T.each(["width","height"],function(e,n){T.attrHooks[n]={set:function(e,t){if(""===t)return e.setAttribute(n,"auto"),t}}})),v.style||(T.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var Lt=/^(?:input|select|textarea|button|object)$/i,Ht=/^(?:a|area)$/i;T.fn.extend({prop:function(e,t){return G(this,T.prop,e,t,1<arguments.length)},removeProp:function(e){return e=T.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(e){}})}}),T.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&T.isXMLDoc(e)||(t=T.propFix[t]||t,o=T.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):Lt.test(e.nodeName)||Ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.hrefNormalized||T.each(["href","src"],function(e,t){T.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),v.optSelected||(T.propHooks.selected={get:function(e){e=e.parentNode;return e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex),null},set:function(e){e=e.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){T.propFix[this.toLowerCase()]=this}),v.enctype||(T.propFix.enctype="encoding");var Mt=/[\t\r\n\f]/g;function qt(e){return T.attr(e,"class")||""}T.fn.extend({addClass:function(t){var e,n,r,o,i,a,s=0;if(T.isFunction(t))return this.each(function(e){T(this).addClass(t.call(this,e,qt(this)))});if("string"==typeof t&&t)for(e=t.match(M)||[];n=this[s++];)if(a=qt(n),r=1===n.nodeType&&(" "+a+" ").replace(Mt," ")){for(i=0;o=e[i++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");a!==(a=T.trim(r))&&T.attr(n,"class",a)}return this},removeClass:function(t){var e,n,r,o,i,a,s=0;if(T.isFunction(t))return this.each(function(e){T(this).removeClass(t.call(this,e,qt(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(M)||[];n=this[s++];)if(a=qt(n),r=1===n.nodeType&&(" "+a+" ").replace(Mt," ")){for(i=0;o=e[i++];)for(;-1<r.indexOf(" "+o+" ");)r=r.replace(" "+o+" "," ");a!==(a=T.trim(r))&&T.attr(n,"class",a)}return this},toggleClass:function(o,t){var i=typeof o;return"boolean"==typeof t&&"string"==i?t?this.addClass(o):this.removeClass(o):T.isFunction(o)?this.each(function(e){T(this).toggleClass(o.call(this,e,qt(this),t),t)}):this.each(function(){var e,t,n,r;if("string"==i)for(t=0,n=T(this),r=o.match(M)||[];e=r[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==o&&"boolean"!=i||((e=qt(this))&&T._data(this,"__className__",e),T.attr(this,"class",!e&&!1!==o&&T._data(this,"__className__")||""))})},hasClass:function(e){for(var t,n=0,r=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+qt(t)+" ").replace(Mt," ").indexOf(r))return!0;return!1}}),T.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,n){T.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),T.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});var p=w.location,Bt=T.now(),Pt=/\?/,Ot=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;T.parseJSON=function(e){if(w.JSON&&w.JSON.parse)return w.JSON.parse(e+"");var o,i=null,t=T.trim(e+"");return t&&!T.trim(t.replace(Ot,function(e,t,n,r){return 0===(i=o&&t?0:i)?e:(o=n||t,i+=!r-!n,"")}))?Function("return "+t)():T.error("Invalid JSON: "+e)},T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{w.DOMParser?t=(new w.DOMParser).parseFromString(e,"text/xml"):((t=new w.ActiveXObject("Microsoft.XMLDOM")).async="false",t.loadXML(e))}catch(e){t=void 0}return t&&t.documentElement&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var Ft=/#.*$/,Rt=/([?&])_=[^&]*/,Wt=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,_t=/^(?:GET|HEAD)$/,zt=/^\/\//,It=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Xt={},$t={},Yt="*/".concat("*"),Vt=p.href,Ut=It.exec(Vt.toLowerCase())||[];function Gt(i){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,o=e.toLowerCase().match(M)||[];if(T.isFunction(t))for(;n=o[r++];)"+"===n.charAt(0)?(n=n.slice(1)||"*",(i[n]=i[n]||[]).unshift(t)):(i[n]=i[n]||[]).push(t)}}function Qt(t,r,o,i){var a={},s=t===$t;function l(e){var n;return a[e]=!0,T.each(t[e]||[],function(e,t){t=t(r,o,i);return"string"!=typeof t||s||a[t]?s?!(n=t):void 0:(r.dataTypes.unshift(t),l(t),!1)}),n}return l(r.dataTypes[0])||!a["*"]&&l("*")}function Jt(e,t){var n,r,o=T.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((o[r]?e:n=n||{})[r]=t[r]);return n&&T.extend(!0,e,n),e}function Kt(e){if(!T.contains(e.ownerDocument||h,e))return!0;for(;e&&1===e.nodeType;){if("none"===((t=e).style&&t.style.display||T.css(t,"display"))||"hidden"===e.type)return!0;e=e.parentNode}var t;return!1}T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Vt,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ut[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Yt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":T.parseJSON,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,T.ajaxSettings),t):Jt(T.ajaxSettings,e)},ajaxPrefilter:Gt(Xt),ajaxTransport:Gt($t),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0);var n,l,u,c,d,f,r,p=T.ajaxSetup({},t=t||{}),h=p.context||p,m=p.context&&(h.nodeType||h.jquery)?T(h):T.event,g=T.Deferred(),v=T.Callbacks("once memory"),y=p.statusCode||{},o={},i={},b=0,a="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!r)for(r={};t=Wt.exec(u);)r[t[1].toLowerCase()]=t[2];t=r[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?u:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=i[n]=i[n]||e,o[e]=t),this},overrideMimeType:function(e){return b||(p.mimeType=e),this},statusCode:function(e){if(e)if(b<2)for(var t in e)y[t]=[y[t],e[t]];else x.always(e[x.status]);return this},abort:function(e){e=e||a;return f&&f.abort(e),s(0,e),this}};if(g.promise(x).complete=v.add,x.success=x.done,x.error=x.fail,p.url=((e||p.url||Vt)+"").replace(Ft,"").replace(zt,Ut[1]+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=T.trim(p.dataType||"*").toLowerCase().match(M)||[""],null==p.crossDomain&&(e=It.exec(p.url.toLowerCase()),p.crossDomain=!(!e||e[1]===Ut[1]&&e[2]===Ut[2]&&(e[3]||("http:"===e[1]?"80":"443"))===(Ut[3]||("http:"===Ut[1]?"80":"443")))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=T.param(p.data,p.traditional)),Qt(Xt,p,t,x),2===b)return x;for(n in(d=T.event&&p.global)&&0==T.active++&&T.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!_t.test(p.type),l=p.url,p.hasContent||(p.data&&(l=p.url+=(Pt.test(l)?"&":"?")+p.data,delete p.data),!1===p.cache&&(p.url=Rt.test(l)?l.replace(Rt,"$1_="+Bt++):l+(Pt.test(l)?"&":"?")+"_="+Bt++)),p.ifModified&&(T.lastModified[l]&&x.setRequestHeader("If-Modified-Since",T.lastModified[l]),T.etag[l]&&x.setRequestHeader("If-None-Match",T.etag[l])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&x.setRequestHeader("Content-Type",p.contentType),x.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Yt+"; q=0.01":""):p.accepts["*"]),p.headers)x.setRequestHeader(n,p.headers[n]);if(p.beforeSend&&(!1===p.beforeSend.call(h,x,p)||2===b))return x.abort();for(n in a="abort",{success:1,error:1,complete:1})x[n](p[n]);if(f=Qt($t,p,t,x)){if(x.readyState=1,d&&m.trigger("ajaxSend",[x,p]),2===b)return x;p.async&&0<p.timeout&&(c=w.setTimeout(function(){x.abort("timeout")},p.timeout));try{b=1,f.send(o,s)}catch(e){if(!(b<2))throw e;s(-1,e)}}else s(-1,"No Transport");function s(e,t,n,r){var o,i,a,s=t;2!==b&&(b=2,c&&w.clearTimeout(c),f=void 0,u=r||"",x.readyState=0<e?4:0,r=200<=e&&e<300||304===e,n&&(a=function(e,t,n){for(var r,o,i,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=e.mimeType||t.getResponseHeader("Content-Type"));if(o)for(a in s)if(s[a]&&s[a].test(o)){l.unshift(a);break}if(l[0]in n)i=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){i=a;break}r=r||a}i=i||r}if(i)return i!==l[0]&&l.unshift(i),n[i]}(p,x,n)),a=function(e,t,n,r){var o,i,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=c.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(a=u[l+" "+i]||u["* "+i]))for(o in u)if((s=o.split(" "))[1]===i&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[o]:!0!==u[o]&&(i=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(p,a,x,r),r?(p.ifModified&&((n=x.getResponseHeader("Last-Modified"))&&(T.lastModified[l]=n),(n=x.getResponseHeader("etag"))&&(T.etag[l]=n)),204===e||"HEAD"===p.type?s="nocontent":304===e?s="notmodified":(s=a.state,o=a.data,r=!(i=a.error))):(i=s,!e&&s||(s="error",e<0&&(e=0))),x.status=e,x.statusText=(t||s)+"",r?g.resolveWith(h,[o,s,x]):g.rejectWith(h,[x,s,i]),x.statusCode(y),y=void 0,d&&m.trigger(r?"ajaxSuccess":"ajaxError",[x,p,r?o:i]),v.fireWith(h,[x,s]),d&&(m.trigger("ajaxComplete",[x,p]),--T.active||T.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],function(e,o){T[o]=function(e,t,n,r){return T.isFunction(t)&&(r=r||n,n=t,t=void 0),T.ajax(T.extend({url:e,type:o,dataType:r,data:t,success:n},T.isPlainObject(e)&&e))}}),T._evalUrl=function(e){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},T.fn.extend({wrapAll:function(t){return T.isFunction(t)?this.each(function(e){T(this).wrapAll(t.call(this,e))}):(this[0]&&(e=T(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)),this);var e},wrapInner:function(n){return T.isFunction(n)?this.each(function(e){T(this).wrapInner(n.call(this,e))}):this.each(function(){var e=T(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=T.isFunction(t);return this.each(function(e){T(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(){return this.parent().each(function(){T.nodeName(this,"body")||T(this).replaceWith(this.childNodes)}).end()}}),T.expr.filters.hidden=function(e){return v.reliableHiddenOffsets()?e.offsetWidth<=0&&e.offsetHeight<=0&&!e.getClientRects().length:Kt(e)},T.expr.filters.visible=function(e){return!T.expr.filters.hidden(e)};var Zt=/%20/g,en=/\[\]$/,tn=/\r?\n/g,nn=/^(?:submit|button|image|reset|file)$/i,rn=/^(?:input|select|textarea|keygen)/i;T.param=function(e,t){function n(e,t){t=T.isFunction(t)?t():null==t?"":t,o[o.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)}var r,o=[];if(void 0===t&&(t=T.ajaxSettings&&T.ajaxSettings.traditional),T.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,function(){n(this.name,this.value)});else for(r in e)!function n(r,e,o,i){if(T.isArray(e))T.each(e,function(e,t){o||en.test(r)?i(r,t):n(r+"["+("object"==typeof t&&null!=t?e:"")+"]",t,o,i)});else if(o||"object"!==T.type(e))i(r,e);else for(var t in e)n(r+"["+t+"]",e[t],o,i)}(r,e[r],t,n);return o.join("&").replace(Zt,"+")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&rn.test(this.nodeName)&&!nn.test(e)&&(this.checked||!Q.test(e))}).map(function(e,t){var n=T(this).val();return null==n?null:T.isArray(n)?T.map(n,function(e){return{name:t.name,value:e.replace(tn,"\r\n")}}):{name:t.name,value:n.replace(tn,"\r\n")}}).get()}}),T.ajaxSettings.xhr=void 0!==w.ActiveXObject?function(){return this.isLocal?ln():8<h.documentMode?sn():/^(get|post|head|put|delete|options)$/i.test(this.type)&&sn()||ln()}:sn;var on=0,an={},p=T.ajaxSettings.xhr();function sn(){try{return new w.XMLHttpRequest}catch(e){}}function ln(){try{return new w.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}w.attachEvent&&w.attachEvent("onunload",function(){for(var e in an)an[e](void 0,!0)}),v.cors=!!p&&"withCredentials"in p,(p=v.ajax=!!p)&&T.ajaxTransport(function(l){var u;if(!l.crossDomain||v.cors)return{send:function(e,i){var t,a=l.xhr(),s=++on;if(a.open(l.type,l.url,l.async,l.username,l.password),l.xhrFields)for(t in l.xhrFields)a[t]=l.xhrFields[t];for(t in l.mimeType&&a.overrideMimeType&&a.overrideMimeType(l.mimeType),l.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)void 0!==e[t]&&a.setRequestHeader(t,e[t]+"");a.send(l.hasContent&&l.data||null),u=function(e,t){var n,r,o;if(u&&(t||4===a.readyState))if(delete an[s],u=void 0,a.onreadystatechange=T.noop,t)4!==a.readyState&&a.abort();else{o={},n=a.status,"string"==typeof a.responseText&&(o.text=a.responseText);try{r=a.statusText}catch(e){r=""}n||!l.isLocal||l.crossDomain?1223===n&&(n=204):n=o.text?200:404}o&&i(n,r,o,a.getAllResponseHeaders())},l.async?4===a.readyState?w.setTimeout(u):a.onreadystatechange=an[s]=u:u()},abort:function(){u&&u(void 0,!0)}}}),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),T.ajaxTransport("script",function(t){if(t.crossDomain){var r,o=h.head||T("head")[0]||h.documentElement;return{send:function(e,n){(r=h.createElement("script")).async=!0,t.scriptCharset&&(r.charset=t.scriptCharset),r.src=t.url,r.onload=r.onreadystatechange=function(e,t){!t&&r.readyState&&!/loaded|complete/.test(r.readyState)||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),r=null,t||n(200,"success"))},o.insertBefore(r,o.firstChild)},abort:function(){r&&r.onload(void 0,!0)}}}});var un=[],cn=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=un.pop()||T.expando+"_"+Bt++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",function(e,t,n){var r,o,i,a=!1!==e.jsonp&&(cn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&cn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=T.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(cn,"$1"+r):!1!==e.jsonp&&(e.url+=(Pt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return i||T.error(r+" was not called"),i[0]},e.dataTypes[0]="json",o=w[r],w[r]=function(){i=arguments},n.always(function(){void 0===o?T(w).removeProp(r):w[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,un.push(r)),i&&T.isFunction(o)&&o(i[0]),i=o=void 0}),"script"}),T.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||h;var r=j.exec(e),n=!n&&[];return r?[t.createElement(r[1])]:(r=le([e],t,n),n&&n.length&&T(n).remove(),T.merge([],r.childNodes))};var dn=T.fn.load;function fn(e){return T.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}T.fn.load=function(e,t,n){if("string"!=typeof e&&dn)return dn.apply(this,arguments);var r,o,i,a=this,s=e.indexOf(" ");return-1<s&&(r=T.trim(e.slice(s,e.length)),e=e.slice(0,s)),T.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),0<a.length&&T.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){i=arguments,a.html(r?T("<div>").append(T.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){T.fn[t]=function(e){return this.on(t,e)}}),T.expr.filters.animated=function(t){return T.grep(T.timers,function(e){return t===e.elem}).length},T.offset={setOffset:function(e,t,n){var r,o,i,a,s=T.css(e,"position"),l=T(e),u={};"static"===s&&(e.style.position="relative"),i=l.offset(),r=T.css(e,"top"),a=T.css(e,"left"),a=("absolute"===s||"fixed"===s)&&-1<T.inArray("auto",[r,a])?(o=(s=l.position()).top,s.left):(o=parseFloat(r)||0,parseFloat(a)||0),null!=(t=T.isFunction(t)?t.call(e,n,T.extend({},i)):t).top&&(u.top=t.top-i.top+o),null!=t.left&&(u.left=t.left-i.left+a),"using"in t?t.using.call(e,u):l.css(u)}},T.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){T.offset.setOffset(this,t,e)});var e,n={top:0,left:0},r=this[0],o=r&&r.ownerDocument;return o?(e=o.documentElement,T.contains(e,r)?(void 0!==r.getBoundingClientRect&&(n=r.getBoundingClientRect()),o=fn(o),{top:n.top+(o.pageYOffset||e.scrollTop)-(e.clientTop||0),left:n.left+(o.pageXOffset||e.scrollLeft)-(e.clientLeft||0)}):n):void 0},position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===T.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),(n=!T.nodeName(e[0],"html")?e.offset():n).top+=T.css(e[0],"borderTopWidth",!0),n.left+=T.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-T.css(r,"marginTop",!0),left:t.left-n.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&!T.nodeName(e,"html")&&"static"===T.css(e,"position");)e=e.offsetParent;return e||Ve})}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,o){var i=/Y/.test(o);T.fn[t]=function(e){return G(this,function(e,t,n){var r=fn(e);if(void 0===n)return r?o in r?r[o]:r.document.documentElement[t]:e[t];r?r.scrollTo(i?T(r).scrollLeft():n,i?n:T(r).scrollTop()):e[t]=n},t,e,arguments.length,null)}}),T.each(["top","left"],function(e,n){T.cssHooks[n]=Ke(v.pixelPosition,function(e,t){if(t)return t=Qe(e,n),Ye.test(t)?T(e).position()[n]+"px":t})}),T.each({Height:"height",Width:"width"},function(i,a){T.each({padding:"inner"+i,content:a,"":"outer"+i},function(r,e){T.fn[e]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),o=r||(!0===e||!0===t?"margin":"border");return G(this,function(e,t,n){var r;return T.isWindow(e)?e.document.documentElement["client"+i]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+i],r["scroll"+i],e.body["offset"+i],r["offset"+i],r["client"+i])):void 0===n?T.css(e,t,o):T.style(e,t,n,o)},a,n?e:void 0,n,null)}})}),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),T.fn.size=function(){return this.length},T.fn.andSelf=T.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return T});var pn=w.jQuery,hn=w.$;return T.noConflict=function(e){return w.$===T&&(w.$=hn),e&&w.jQuery===T&&(w.jQuery=pn),T},e||(w.jQuery=w.$=T),T}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e(jQuery||require("jquery")):e(jQuery)}(function(Ce){Ce.fn.jScrollPane=function(n){function r(T,e){var j,C,k,S,E,N,D,A,L,H,M,q,B,P,O,F,R,W,_,t,z,I,X,$,Y,V,U,G,Q,J,K,Z,ee,te,ne=this,o=!0,i=!0,a=!1,s=!1,n=T.clone(!1,!1).empty(),re=!1,oe=Ce.fn.mwheelIntent?"mwheelIntent.jsp":"mousewheel.jsp",ie=function(){0<j.resizeSensorDelay?setTimeout(function(){ae(j)},j.resizeSensorDelay):ae(j)};function ae(e){var t,n,r,o,i,a,s,l,u,c,d,f,p,h,m,g,v,y,b=!1,x=!1;if(j=e,void 0===C)r=T.scrollTop(),o=T.scrollLeft(),T.css({overflow:"hidden",padding:0}),k=T.innerWidth()+ee,S=T.innerHeight(),T.width(k),C=Ce('<div class="jspPane" />').css("padding",Z).append(T.children()),E=Ce('<div class="jspContainer" />').css({width:k+"px",height:S+"px"}).append(C).appendTo(T);else{if(T.css("width",""),E.css({width:"auto",height:"auto"}),C.css("position","static"),i=T.innerWidth()+ee,a=T.innerHeight(),C.css("position","absolute"),b=j.stickToBottom&&20<(l=D-S)&&l-Te()<10,x=j.stickToRight&&20<(s=N-k)&&s-we()<10,y=i!==k||a!==S,k=i,S=a,E.css({width:k,height:S}),!y&&te==N&&C.outerHeight()==D)return T.width(k),0;te=N,C.css("width",""),T.width(k),E.find(">.jspVerticalBar,>.jspHorizontalBar").remove().end()}function w(){var e=R,t=P;switch(m){case 40:ne.scrollByY(j.keyboardSpeed,!1);break;case 38:ne.scrollByY(-j.keyboardSpeed,!1);break;case 34:case 32:ne.scrollByY(S*j.scrollPagePercent,!1);break;case 33:ne.scrollByY(-S*j.scrollPagePercent,!1);break;case 39:ne.scrollByX(j.keyboardSpeed,!1);break;case 37:ne.scrollByX(-j.keyboardSpeed,!1)}return g=e!=R||t!=P}C.css("overflow","auto"),N=e.contentWidth||C[0].scrollWidth,D=C[0].scrollHeight,C.css("overflow",""),A=N/k,H=1<(L=D/S)||j.alwaysShowVScroll,(M=1<A||j.alwaysShowHScroll)||H?(T.addClass("jspScrollable"),(a=j.maintainPosition&&(P||R))&&(t=we(),n=Te()),H&&(E.append(Ce('<div class="jspVerticalBar" />').append(Ce('<div class="jspCap jspCapTop" />'),Ce('<div class="jspTrack" />').append(Ce('<div class="jspDrag" />').append(Ce('<div class="jspDragTop" />'),Ce('<div class="jspDragBottom" />'))),Ce('<div class="jspCap jspCapBottom" />'))),W=E.find(">.jspVerticalBar"),_=W.find(">.jspTrack"),q=_.find(">.jspDrag"),j.showArrows&&(X=Ce('<a class="jspArrow jspArrowUp" />').on("mousedown.jsp",de(0,-1)).on("click.jsp",je),$=Ce('<a class="jspArrow jspArrowDown" />').on("mousedown.jsp",de(0,1)).on("click.jsp",je),j.arrowScrollOnHover&&(X.on("mouseover.jsp",de(0,-1,X)),$.on("mouseover.jsp",de(0,1,$))),ce(_,j.verticalArrowPositions,X,$)),z=S,E.find(">.jspVerticalBar>.jspCap:visible,>.jspVerticalBar>.jspArrow").each(function(){z-=Ce(this).outerHeight()}),q.on("mouseenter",function(){q.addClass("jspHover")}).on("mouseleave",function(){q.removeClass("jspHover")}).on("mousedown.jsp",function(e){Ce("html").on("dragstart.jsp selectstart.jsp",je),q.addClass("jspActive");var t=e.pageY-q.position().top;return Ce("html").on("mousemove.jsp",function(e){he(e.pageY-t,!1)}).on("mouseup.jsp mouseleave.jsp",pe),!1}),le()),M&&(E.append(Ce('<div class="jspHorizontalBar" />').append(Ce('<div class="jspCap jspCapLeft" />'),Ce('<div class="jspTrack" />').append(Ce('<div class="jspDrag" />').append(Ce('<div class="jspDragLeft" />'),Ce('<div class="jspDragRight" />'))),Ce('<div class="jspCap jspCapRight" />'))),Y=E.find(">.jspHorizontalBar"),V=Y.find(">.jspTrack"),O=V.find(">.jspDrag"),j.showArrows&&(Q=Ce('<a class="jspArrow jspArrowLeft" />').on("mousedown.jsp",de(-1,0)).on("click.jsp",je),J=Ce('<a class="jspArrow jspArrowRight" />').on("mousedown.jsp",de(1,0)).on("click.jsp",je),j.arrowScrollOnHover&&(Q.on("mouseover.jsp",de(-1,0,Q)),J.on("mouseover.jsp",de(1,0,J))),ce(V,j.horizontalArrowPositions,Q,J)),O.on("mouseenter",function(){O.addClass("jspHover")}).on("mouseleave",function(){O.removeClass("jspHover")}).on("mousedown.jsp",function(e){Ce("html").on("dragstart.jsp selectstart.jsp",je),O.addClass("jspActive");var t=e.pageX-O.position().left;return Ce("html").on("mousemove.jsp",function(e){ge(e.pageX-t,!1)}).on("mouseup.jsp mouseleave.jsp",pe),!1}),U=E.innerWidth(),ue()),M&&H&&(y=V.outerHeight(),e=_.outerWidth(),z-=y,Ce(Y).find(">.jspCap:visible,>.jspArrow").each(function(){U+=Ce(this).outerWidth()}),U-=e,S-=e,k-=y,V.parent().append(Ce('<div class="jspCorner" />').css("width",y+"px")),le(),ue()),M&&C.width(E.outerWidth()-ee+"px"),D=C.outerHeight(),L=D/S,M&&((G=Math.ceil(1/A*U))>j.horizontalDragMaxWidth?G=j.horizontalDragMaxWidth:G<j.horizontalDragMinWidth&&(G=j.horizontalDragMinWidth),O.css("width",G+"px"),F=U-G,ve(R)),H&&((I=Math.ceil(1/L*z))>j.verticalDragMaxHeight?I=j.verticalDragMaxHeight:I<j.verticalDragMinHeight&&(I=j.verticalDragMinHeight),q.css("height",I+"px"),B=z-I,me(P)),a&&(be(x?N-k:t,!1),ye(b?D-S:n,!1)),C.find(":input,a").off("focus.jsp").on("focus.jsp",function(e){xe(e.target,!1)}),E.off(oe).on(oe,function(e,t,n,r){var o=R=R||0,i=P=P||0,e=e.deltaFactor||j.mouseWheelSpeed;return ne.scrollBy(n*e,-r*e,!1),o==R&&i==P}),h=!1,E.off("touchstart.jsp touchmove.jsp touchend.jsp click.jsp-touchclick").on("touchstart.jsp",function(e){e=e.originalEvent.touches[0];u=we(),c=Te(),d=e.pageX,f=e.pageY,h=!(p=!1)}).on("touchmove.jsp",function(e){if(h){var t=e.originalEvent.touches[0],n=R,e=P;return ne.scrollTo(u+d-t.pageX,c+f-t.pageY),p=p||5<Math.abs(d-t.pageX)||5<Math.abs(f-t.pageY),n==R&&e==P}}).on("touchend.jsp",function(e){h=!1}).on("click.jsp-touchclick",function(e){if(p)return p=!1}),j.enableKeyboardNavigation&&(v=[],M&&v.push(Y[0]),H&&v.push(W[0]),C.on("focus.jsp",function(){T.focus()}),T.attr("tabindex",0).off("keydown.jsp keypress.jsp").on("keydown.jsp",function(e){if(e.target===this||v.length&&Ce(e.target).closest(v).length){var t=R,n=P;switch(e.keyCode){case 40:case 38:case 34:case 32:case 33:case 39:case 37:m=e.keyCode,w();break;case 35:ye(D-S),m=null;break;case 36:ye(0),m=null}return!(g=e.keyCode==m&&t!=R||n!=P)}}).on("keypress.jsp",function(e){if(e.keyCode==m&&w(),e.target===this||v.length&&Ce(e.target).closest(v).length)return!g}),j.hideFocus?(T.css("outline","none"),"hideFocus"in E[0]&&T.attr("hideFocus",!0)):(T.css("outline",""),"hideFocus"in E[0]&&T.attr("hideFocus",!1))),j.clickOnTrack&&(fe(),H&&_.on("mousedown.jsp",function(r){if(void 0===r.originalTarget||r.originalTarget==r.currentTarget){var o,i=Ce(this),e=i.offset(),a=r.pageY-e.top-P,s=!0,l=function(){var e=i.offset(),t=r.pageY-e.top-I/2,n=S*j.scrollPagePercent,e=B*n/(D-S);if(a<0)t<P-e?ne.scrollByY(-n):he(t);else{if(!(0<a))return void u();P+e<t?ne.scrollByY(n):he(t)}o=setTimeout(l,s?j.initialDelay:j.trackClickRepeatFreq),s=!1},u=function(){o&&clearTimeout(o),o=null,Ce(document).off("mouseup.jsp",u)};return l(),Ce(document).on("mouseup.jsp",u),!1}}),M&&V.on("mousedown.jsp",function(r){if(void 0===r.originalTarget||r.originalTarget==r.currentTarget){var o,i=Ce(this),e=i.offset(),a=r.pageX-e.left-R,s=!0,l=function(){var e=i.offset(),t=r.pageX-e.left-G/2,n=k*j.scrollPagePercent,e=F*n/(N-k);if(a<0)t<R-e?ne.scrollByX(-n):ge(t);else{if(!(0<a))return void u();R+e<t?ne.scrollByX(n):ge(t)}o=setTimeout(l,s?j.initialDelay:j.trackClickRepeatFreq),s=!1},u=function(){o&&clearTimeout(o),o=null,Ce(document).off("mouseup.jsp",u)};return l(),Ce(document).on("mouseup.jsp",u),!1}})),function(){if(location.hash&&1<location.hash.length){var e,t,n=escape(location.hash.substr(1));try{e=Ce("#"+n+', a[name="'+n+'"]')}catch(e){return}e.length&&C.find(n)&&(0===E.scrollTop()?t=setInterval(function(){0<E.scrollTop()&&(xe(e,!0),Ce(document).scrollTop(E.position().top),clearInterval(t))},50):(xe(e,!0),Ce(document).scrollTop(E.position().top)))}}(),j.hijackInternalLinks&&(Ce(document.body).data("jspHijack")||(Ce(document.body).data("jspHijack",!0),Ce(document.body).delegate('a[href*="#"]',"click",function(e){var t,n=this.href.substr(0,this.href.indexOf("#")),r=location.href;if(n===(r=-1!==location.href.indexOf("#")?location.href.substr(0,location.href.indexOf("#")):r)){n=escape(this.href.substr(this.href.indexOf("#")+1));try{t=Ce("#"+n+', a[name="'+n+'"]')}catch(e){return}t.length&&((r=t.closest(".jspScrollable")).data("jsp").scrollToElement(t,!0),r[0].scrollIntoView&&(n=Ce(window).scrollTop(),((t=t.offset().top)<n||t>n+Ce(window).height())&&r[0].scrollIntoView()),e.preventDefault())}})))):(T.removeClass("jspScrollable"),C.css({top:0,left:0,width:E.width()-ee}),E.off(oe),C.find(":input,a").off("focus.jsp"),T.attr("tabindex","-1").removeAttr("tabindex").off("keydown.jsp keypress.jsp"),C.off(".jsp"),fe()),j.resizeSensor||!j.autoReinitialise||K?j.resizeSensor||j.autoReinitialise||!K||clearInterval(K):K=setInterval(function(){ae(j)},j.autoReinitialiseDelay),j.resizeSensor&&!re&&(se(C,ie),se(T,ie),se(T.parent(),ie),window.addEventListener("resize",ie),re=!0),r&&T.scrollTop(0)&&ye(r,!1),o&&T.scrollLeft(0)&&be(o,!1),T.trigger("jsp-initialised",[M||H])}function se(e,t){var n,r,o=document.createElement("div"),i=document.createElement("div"),a=document.createElement("div"),s=document.createElement("div"),l=document.createElement("div");o.style.cssText="position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: scroll; z-index: -1; visibility: hidden;",i.style.cssText="position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: scroll; z-index: -1; visibility: hidden;",s.style.cssText="position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: scroll; z-index: -1; visibility: hidden;",a.style.cssText="position: absolute; left: 0; top: 0;",l.style.cssText="position: absolute; left: 0; top: 0; width: 200%; height: 200%;";function u(){a.style.width=i.offsetWidth+10+"px",a.style.height=i.offsetHeight+10+"px",i.scrollLeft=i.scrollWidth,i.scrollTop=i.scrollHeight,s.scrollLeft=s.scrollWidth,s.scrollTop=s.scrollHeight,n=e.width(),r=e.height()}i.addEventListener("scroll",function(){(e.width()>n||e.height()>r)&&t.apply(this,[]),u()}.bind(this)),s.addEventListener("scroll",function(){(e.width()<n||e.height()<r)&&t.apply(this,[]),u()}.bind(this)),i.appendChild(a),s.appendChild(l),o.appendChild(i),o.appendChild(s),e.append(o),"static"===window.getComputedStyle(e[0],null).getPropertyValue("position")&&(e[0].style.position="relative"),u()}function le(){_.height(z+"px"),P=0,t=j.verticalGutter+_.outerWidth(),C.width(k-t-ee);try{0===W.position().left&&C.css("margin-left",t+"px")}catch(e){}}function ue(){E.find(">.jspHorizontalBar>.jspCap:visible,>.jspHorizontalBar>.jspArrow").each(function(){U-=Ce(this).outerWidth()}),V.width(U+"px"),R=0}function ce(e,t,n,r){var o="before",i="after";(t="os"==t?/Mac/.test(navigator.platform)?"after":"split":t)==o?i=t:t==i&&(o=t,t=n,n=r,r=t),e[o](n)[i](r)}function de(e,t,n){return function(){return function(e,t,n,r){n=Ce(n).addClass("jspActive");var o,i,a=!0,s=function(){0!==e&&ne.scrollByX(e*j.arrowButtonSpeed),0!==t&&ne.scrollByY(t*j.arrowButtonSpeed),i=setTimeout(s,a?j.initialDelay:j.arrowRepeatFreq),a=!1};s(),o=r?"mouseout.jsp":"mouseup.jsp",(r=r||Ce("html")).on(o,function(){n.removeClass("jspActive"),i&&clearTimeout(i),i=null,r.off(o)})}(e,t,this,n),this.blur(),!1}}function fe(){V&&V.off("mousedown.jsp"),_&&_.off("mousedown.jsp")}function pe(){Ce("html").off("dragstart.jsp selectstart.jsp mousemove.jsp mouseup.jsp mouseleave.jsp"),q&&q.removeClass("jspActive"),O&&O.removeClass("jspActive")}function he(e,t){var n,r,o,i;H&&(e<0?e=0:B<e&&(e=B),n=new Ce.Event("jsp-will-scroll-y"),T.trigger(n,[e]),n.isDefaultPrevented()||(r=0===(n=e||0),o=n==B,i=-e/B*(D-S),(t=void 0===t?j.animateScroll:t)?ne.animate(q,"top",e,me,function(){T.trigger("jsp-user-scroll-y",[-i,r,o])}):(q.css("top",e),me(e),T.trigger("jsp-user-scroll-y",[-i,r,o]))))}function me(e){void 0===e&&(e=q.position().top),E.scrollTop(0);var t=0===(P=e||0),n=P==B,r=-e/B*(D-S);o==t&&a==n||(o=t,a=n,T.trigger("jsp-arrow-change",[o,a,i,s])),e=n,j.showArrows&&(X[t?"addClass":"removeClass"]("jspDisabled"),$[e?"addClass":"removeClass"]("jspDisabled")),C.css("top",r),T.trigger("jsp-scroll-y",[-r,t,n]).trigger("scroll")}function ge(e,t){var n,r,o,i;M&&(e<0?e=0:F<e&&(e=F),n=new Ce.Event("jsp-will-scroll-x"),T.trigger(n,[e]),n.isDefaultPrevented()||(r=0===(n=e||0),o=n==F,i=-e/F*(N-k),(t=void 0===t?j.animateScroll:t)?ne.animate(O,"left",e,ve,function(){T.trigger("jsp-user-scroll-x",[-i,r,o])}):(O.css("left",e),ve(e),T.trigger("jsp-user-scroll-x",[-i,r,o]))))}function ve(e){void 0===e&&(e=O.position().left),E.scrollTop(0);var t=0===(R=e||0),n=R==F,r=-e/F*(N-k);i==t&&s==n||(i=t,s=n,T.trigger("jsp-arrow-change",[o,a,i,s])),e=n,j.showArrows&&(Q[t?"addClass":"removeClass"]("jspDisabled"),J[e?"addClass":"removeClass"]("jspDisabled")),C.css("left",r),T.trigger("jsp-scroll-x",[-r,t,n]).trigger("scroll")}function ye(e,t){he(e/(D-S)*B,t)}function be(e,t){ge(e/(N-k)*F,t)}function xe(e,t,n){var r,o,i,a,s,l,u,c=0,d=0;try{r=Ce(e)}catch(e){return}for(a=r.outerHeight(),o=r.outerWidth(),E.scrollTop(0),E.scrollLeft(0);!r.is(".jspPane");)if(c+=r.position().top,d+=r.position().left,r=r.offsetParent(),/^body|html$/i.test(r[0].nodeName))return;s=(i=Te())+S,c<i||t?l=c-j.horizontalGutter:s<c+a&&(l=c-S+a+j.horizontalGutter),isNaN(l)||ye(l,n),l=(a=we())+k,d<a||t?u=d-j.horizontalGutter:l<d+o&&(u=d-k+o+j.horizontalGutter),isNaN(u)||be(u,n)}function we(){return-C.position().left}function Te(){return-C.position().top}function je(){return!1}ee="border-box"===T.css("box-sizing")?Z=0:(Z=T.css("paddingTop")+" "+T.css("paddingRight")+" "+T.css("paddingBottom")+" "+T.css("paddingLeft"),(parseInt(T.css("paddingLeft"),10)||0)+(parseInt(T.css("paddingRight"),10)||0)),Ce.extend(ne,{reinitialise:function(e){ae(e=Ce.extend({},j,e))},scrollToElement:function(e,t,n){xe(e,t,n)},scrollTo:function(e,t,n){be(e,n),ye(t,n)},scrollToX:function(e,t){be(e,t)},scrollToY:function(e,t){ye(e,t)},scrollToPercentX:function(e,t){be(e*(N-k),t)},scrollToPercentY:function(e,t){ye(e*(D-S),t)},scrollBy:function(e,t,n){ne.scrollByX(e,n),ne.scrollByY(t,n)},scrollByX:function(e,t){ge((we()+Math[e<0?"floor":"ceil"](e))/(N-k)*F,t)},scrollByY:function(e,t){he((Te()+Math[e<0?"floor":"ceil"](e))/(D-S)*B,t)},positionDragX:function(e,t){ge(e,t)},positionDragY:function(e,t){he(e,t)},animate:function(e,t,n,r,o){var i={};i[t]=n,e.animate(i,{duration:j.animateDuration,easing:j.animateEase,queue:!1,step:r,complete:o})},getContentPositionX:we,getContentPositionY:Te,getContentWidth:function(){return N},getContentHeight:function(){return D},getPercentScrolledX:function(){return we()/(N-k)},getPercentScrolledY:function(){return Te()/(D-S)},getIsScrollableH:function(){return M},getIsScrollableV:function(){return H},getContentPane:function(){return C},scrollToBottom:function(e){he(B,e)},hijackInternalLinks:Ce.noop,destroy:function(){var e=Te(),t=we();T.removeClass("jspScrollable").off(".jsp"),C.off(".jsp"),T.replaceWith(n.append(C.children())),n.scrollTop(e),n.scrollLeft(t),K&&clearInterval(K)}}),ae(e)}return n=Ce.extend({},Ce.fn.jScrollPane.defaults,n),Ce.each(["arrowButtonSpeed","trackClickSpeed","keyboardSpeed"],function(){n[this]=n[this]||n.speed}),this.each(function(){var e=Ce(this),t=e.data("jsp");t?t.reinitialise(n):(Ce("script",e).filter('[type="text/javascript"],:not([type])').remove(),t=new r(e,n),e.data("jsp",t))})},Ce.fn.jScrollPane.defaults={showArrows:!1,maintainPosition:!0,stickToBottom:!1,stickToRight:!1,clickOnTrack:!0,autoReinitialise:!1,autoReinitialiseDelay:500,verticalDragMinHeight:0,verticalDragMaxHeight:99999,horizontalDragMinWidth:0,horizontalDragMaxWidth:99999,contentWidth:void 0,animateScroll:!1,animateDuration:300,animateEase:"linear",hijackInternalLinks:!1,verticalGutter:4,horizontalGutter:4,mouseWheelSpeed:3,arrowButtonSpeed:0,arrowRepeatFreq:50,arrowScrollOnHover:!1,trackClickSpeed:0,trackClickRepeatFreq:70,verticalArrowPositions:"split",horizontalArrowPositions:"split",enableKeyboardNavigation:!0,hideFocus:!1,keyboardSpeed:0,initialDelay:300,speed:30,scrollPagePercent:.8,alwaysShowVScroll:!1,alwaysShowHScroll:!1,resizeSensor:!1,resizeSensorDelay:0}}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e:e(jQuery)}(function(c){var d,f,e=["wheel","mousewheel","DOMMouseScroll","MozMousePixelScroll"],t="onwheel"in document||9<=document.documentMode?["wheel"]:["mousewheel","DomMouseScroll","MozMousePixelScroll"],p=Array.prototype.slice;if(c.event.fixHooks)for(var n=e.length;n;)c.event.fixHooks[e[--n]]=c.event.mouseHooks;var h=c.event.special.mousewheel={version:"3.1.12",setup:function(){if(this.addEventListener)for(var e=t.length;e;)this.addEventListener(t[--e],r,!1);else this.onmousewheel=r;c.data(this,"mousewheel-line-height",h.getLineHeight(this)),c.data(this,"mousewheel-page-height",h.getPageHeight(this))},teardown:function(){if(this.removeEventListener)for(var e=t.length;e;)this.removeEventListener(t[--e],r,!1);else this.onmousewheel=null;c.removeData(this,"mousewheel-line-height"),c.removeData(this,"mousewheel-page-height")},getLineHeight:function(e){var t=c(e),e=t["offsetParent"in c.fn?"offsetParent":"parent"]();return e.length||(e=c("body")),parseInt(e.css("fontSize"),10)||parseInt(t.css("fontSize"),10)||16},getPageHeight:function(e){return c(e).height()},settings:{adjustOldDeltas:!0,normalizeOffset:!0}};function r(e){var t,n=e||window.event,r=p.call(arguments,1),o=0,i=0,a=0,s=0,l=0,u=0;if((e=c.event.fix(n)).type="mousewheel","detail"in n&&(a=-1*n.detail),"wheelDelta"in n&&(a=n.wheelDelta),"wheelDeltaY"in n&&(a=n.wheelDeltaY),"wheelDeltaX"in n&&(i=-1*n.wheelDeltaX),"axis"in n&&n.axis===n.HORIZONTAL_AXIS&&(i=-1*a,a=0),o=0===a?i:a,"deltaY"in n&&(o=a=-1*n.deltaY),"deltaX"in n&&(i=n.deltaX,0===a&&(o=-1*i)),0!==a||0!==i)return 1===n.deltaMode?(o*=t=c.data(this,"mousewheel-line-height"),a*=t,i*=t):2===n.deltaMode&&(o*=t=c.data(this,"mousewheel-page-height"),a*=t,i*=t),s=Math.max(Math.abs(a),Math.abs(i)),(!f||s<f)&&g(n,f=s)&&(f/=40),g(n,s)&&(o/=40,i/=40,a/=40),o=Math[1<=o?"floor":"ceil"](o/f),i=Math[1<=i?"floor":"ceil"](i/f),a=Math[1<=a?"floor":"ceil"](a/f),h.settings.normalizeOffset&&this.getBoundingClientRect&&(s=this.getBoundingClientRect(),l=e.clientX-s.left,u=e.clientY-s.top),e.deltaX=i,e.deltaY=a,e.deltaFactor=f,e.offsetX=l,e.offsetY=u,e.deltaMode=0,r.unshift(e,o,i,a),d&&clearTimeout(d),d=setTimeout(m,200),(c.event.dispatch||c.event.handle).apply(this,r)}function m(){f=null}function g(e,t){return h.settings.adjustOldDeltas&&"mousewheel"===e.type&&t%120==0}c.fn.extend({mousewheel:function(e){return e?this.bind("mousewheel",e):this.trigger("mousewheel")},unmousewheel:function(e){return this.unbind("mousewheel",e)}})}),function(a){a(document).ready(function(){function e(){767<a(window).width()&&(1<a(window).scrollTop()?a("header").addClass("sticky"):a("header").removeClass("sticky"))}a(window).scroll(function(){e()}),e(),a(".toggler").click(function(e){e.preventDefault(),a(this).toggleClass("open"),a(this).parent().next(".inner").toggleClass("open"),a("body").toggleClass("menu-open")}),a(".amount-manual").on("focus",function(){a(this).parents(".form-item-radio").find(".autre").prop("checked",!0),function(){a(".amount-manual").val()||(a(this).parents(".form-item-radio").find(".form-submit").attr("href","https://"),a(this).parents(".form-don").find(".form-submit").attr("data-name",""))}()}),a(".autre").on("change",function(){a(this).next().find(".amount-manual").focus()}),a(".form-don .amount-manual").on("keyup",function(){this.value=this.value.replace(/ /g,""),this.value=this.value.replace(/\B(?=(\d{3})+(?!\d))/g," "),amount=a(this).val().replace(" ",""),donLink="https://don.pasteur.fr/cellulessouches?from=LIFWB2&periodicity=oneshot&amount="+amount,a(this).parents(".form-don").find(".form-submit").attr("href",donLink),a(this).parents(".form-don").find(".form-submit").attr("data-name","Autre - "+amount+" €")}),a(".form-don .radio-amount").on("click",function(){amount=a(this).attr("data-amount"),donLink="https://don.pasteur.fr/cellulessouches?from=LIFWB2&periodicity=oneshot&amount="+amount,a(this).parents(".form-don").find(".form-submit").attr("href",donLink),a(this).parents(".form-don").find(".form-submit").attr("data-name",amount+" €"),a(this).parents(".form-don").find(".amount-manual").val("")}),a(".allownumeric").on("keypress keyup blur",function(){a(this).val(a(this).val().replace(/[^0-9\.]/g," ")),(event.which<48||57<event.which)&&event.preventDefault()}),a(".play-video").on("click",function(e){e.preventDefault(),a("#video").addClass("open")}),a("#video .close").on("click",function(){a("#video").removeClass("open")}),a(".en-savoir").on("click",function(e){e.preventDefault(),a("#modal-1").fadeIn(),a("body").addClass("popup-open"),a(".en-savoir-window").jScrollPane()}),a("body").on("click",".modal .close, .modal .overlay",function(){a(this).parents(".modal").fadeOut(),a("body").removeClass("popup-open")}),a(document).bind("cbox_open",function(){a("body").css({overflow:"hidden"})}).bind("cbox_closed",function(){a("body").css({overflow:"auto"})});var n,r,o,i;o=r=-50,i=!(n=0),a("header nav a.anchor").click(function(e){e.preventDefault();var t=a(this).attr("href"),e=function(e){a("html,body").animate({scrollTop:a(t).offset().top+e},"slow")};a(window).width()<768&&i?(e(r),a(".toggler").click()):a(window).width()<768?e(r):767<a(window).width()&&a(window).width()<1025?e(o):e(n)})})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
